"id","category_id","code","name","partner_id","struct_id","sequence","condition_select","amount_fix","fondo_ahorro_aux","forma_pago","integrar_al_ingreso","integrar_estatal","integrar_ptu","condition_range_max","condition_range_min","variable_imss_monto","tipo_cotro_pago/id","parte_exenta/id","parte_gravada/id","amount_percentage","amount_percentage_base","exencion","variable_imss","amount_python_compute","condition_python","variable_imss_tipo","tipo_cdeduccion/id","tipo_cpercepcion/id","amount_select"
"__export__.hr_salary_rule_315_22fc6cd6","Percepciones","P001","Sueldo base",,"Sueldos ordinaria","100","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"dias_laborados = 0

if worked_days.WORK100:
   dias_laborados = worked_days.WORK100.number_of_days
if worked_days.FJC:
   dias_laborados = dias_laborados + worked_days.FJC.number_of_days

result = round(contract.sueldo_diario*dias_laborados, 2)

if inputs.P001:
   result = inputs.P001.amount","if worked_days.WORK100:
   result = 1>0
else:
   result = 0>1",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_584_752747b4","Percepciones","P001","Sueldo base",,"Asimilado","100","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"dias_laborados = 0

if worked_days.WORK100:
   dias_laborados = worked_days.WORK100.number_of_days
if worked_days.FJC:
   dias_laborados = dias_laborados + worked_days.FJC.number_of_days

result = round(contract.sueldo_diario*dias_laborados, 2)

if inputs.P001:
   result = inputs.P001.amount","if worked_days.WORK100:
   result = 1>0
else:
   result = 0>1",,,"catalogo.percepciones37","Código Python"
"__export__.hr_salary_rule_9","Percepciones","P005","Septimo dia",,"Sueldos ordinaria","102","Expresión Python","10.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"dias_laborados = 0

if worked_days.SEPT:
   result = round(worked_days.SEPT.number_of_days * contract.sueldo_diario, 2)
else:
  result = 0","if worked_days.SEPT:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_139_6b02665e","Percepciones","P003","Septimo dia liquidación",,"Sueldos ordinaria","103","Expresión Python","10.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"dias_laborados = 0

if contract.dias_pendientes_pagar > 0 :
  dias_laborados = contract.dias_pendientes_pagar
  result = round(1/6 *contract.sueldo_diario*dias_laborados, 2)
else:
  result = 0","if contract.periodicidad_pago ==""02"":
   result = 1> 0
else:
   result = 0> 1","Todo el monto",,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_372_05b6bc3c","Percepciones","P002","Días adicionales",,"Sueldos ordinaria","105","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P002.amount","if inputs.P002:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_300_10e13f2f","Percepcion exenta","PE003","Horas extras doble exento",,"Sueldos ordinaria","110","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"monto_exento = 0
horas_exentas = 0
monto_total = 0

if contract.periodicidad_pago == '02':
   tope_uma = 5
if contract.periodicidad_pago == '04':
   tope_uma = 10

monto_total = worked_days.HEX2.number_of_hours *  contract.sueldo_diario/8 * 2

#revisar si el trabajador gana mas de un salario mínimo
if contract.sueldo_diario >= contract.tablas_cfdi_id.salario_minimo:
   monto_exento =  monto_total * 0.5
else:
   monto_exento =  monto_total

# revisar que lo exento no supere 5 SM por semana (quincenal 10, semanal 5)
if monto_exento > (tope_uma *contract.tablas_cfdi_id.uma):
   monto_exento =  tope_uma * contract.tablas_cfdi_id.uma

result = round(monto_exento,2)
","if worked_days.HEX2:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_298_a1ef148b","Percepcion gravada","PG003","Horas extras doble gravado",,"Sueldos ordinaria","111","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"monto_exento = 0
horas_exentas = 0
monto_total = 0

if contract.periodicidad_pago == '02':
   tope_uma = 5
if contract.periodicidad_pago == '04':
   tope_uma = 10

monto_total = worked_days.HEX2.number_of_hours *  contract.sueldo_diario/8 * 2

#revisar si el trabajador gana mas de un salario mínimo
if contract.sueldo_diario > contract.tablas_cfdi_id.salario_minimo:
   monto_exento =  monto_total * 0.5
else:
   monto_exento =  monto_total

# revisar que lo exento no supere 5 SM por semana (quincenal 10, semanal 5)
if monto_exento > (tope_uma *contract.tablas_cfdi_id.uma):
   monto_exento =  tope_uma * contract.tablas_cfdi_id.uma

result = round(monto_total - monto_exento, 2)","if worked_days.HEX2:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_131_246ebffd","Percepciones","HEX2","Horas extras dobles",,"Sueldos ordinaria","112","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_300_10e13f2f","__export__.hr_salary_rule_298_a1ef148b","0.0",,"True",,"result =  PE003 + PG003","if worked_days.HEX2:
   result = 1>0
else:
   result = 0>1","Todo el monto",,"catalogo.percepciones14","Código Python"
"__export__.hr_salary_rule_182_8ebcd470","Percepcion exenta","PE004","Aguinaldo liquidacion exenta",,"Sueldos ordinaria","115","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"aguinaldo = 0
antiguedad_anos = contract.antiguedad_anos
dias_aguinaldo = 0
dias_proporcionales = 0

if contract.antiguedad_anos < 1:
   antiguedad_anos = 1
else:
   antiguedad_anos = contract.antiguedad_anos

if contract.tablas_cfdi_id:
    line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad_anos)],order='antiguedad desc',limit=1)
    if line:
       dias_aguinaldo = line.aguinaldo

if worked_days.AGUI:
   total = contract.sueldo_diario * worked_days.AGUI.number_of_days
else:
   total = 0

monto_exento =  contract.tablas_cfdi_id.uma * 30

if total > monto_exento:
   result = round(monto_exento, 2)
else:
   result = round(total, 2)","if worked_days.AGUI:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_219_73008d2c","Percepcion exenta","PE004","Aguinaldo exenta",,"Aguinaldo","115","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"aguinaldo = 0
antiguedad_anos = contract.antiguedad_anos
dias_aguinaldo = 0
dias_proporcionales = 0
dias_trabajo = 0

if contract.antiguedad_anos < 1:
   antiguedad_anos = 1
else:
   antiguedad_anos = contract.antiguedad_anos

if contract.tablas_cfdi_id:
    line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad_anos)],order='antiguedad desc',limit=1)
    if line:
       dias_aguinaldo = line.aguinaldo

if worked_days.WORK100:
   dias_trabajo = dias_trabajo + worked_days.WORK100.number_of_days
if worked_days.SEPT:
   dias_trabajo = dias_trabajo + worked_days.SEPT.number_of_days
if worked_days.FJC:
   dias_trabajo = dias_trabajo + worked_days.FJC.number_of_days
if worked_days.VAC:
   dias_trabajo = dias_trabajo + worked_days.VAC.number_of_days
if worked_days.INC_MAT:
   dias_trabajo = dias_trabajo + worked_days.INC_MAT.number_of_days
#if worked_days.INC_EG:
#   dias_trabajo = dias_trabajo + worked_days.INC_EG.number_of_days
if worked_days.INC_RT:
   dias_trabajo = dias_trabajo + worked_days.INC_RT.number_of_days

if dias_trabajo > 0:
   dias_proporcionales = (dias_aguinaldo*dias_trabajo)/365
   total = dias_proporcionales * contract.sueldo_diario

monto_exento =  contract.tablas_cfdi_id.uma * 30

if total > monto_exento:
   result = round(monto_exento,2)
else:
   result = round(total,2)","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_626","Percepcion gravada","PG004","Aguinaldo liquidacion gravada",,"Sueldos ordinaria","116","Expresión Python","17849.34",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"aguinaldo = 0
antiguedad_anos = contract.antiguedad_anos
dias_aguinaldo = 0
dias_proporcionales = 0

if contract.antiguedad_anos < 1:
   antiguedad_anos = 1
else:
   antiguedad_anos = contract.antiguedad_anos

if contract.tablas_cfdi_id:
    line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad_anos)],order='antiguedad desc',limit=1)
    if line:
       dias_aguinaldo = line.aguinaldo

if worked_days.AGUI:
   total = contract.sueldo_diario * worked_days.AGUI.number_of_days

monto_exento =  contract.tablas_cfdi_id.uma * 30

if total > monto_exento:
   result = round(total - monto_exento, 2)
else:
   result = 0","if worked_days.AGUI:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_218_425e2a23","Percepcion gravada","PG004","Aguinaldo gravada",,"Aguinaldo","116","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"aguinaldo = 0
antiguedad_anos = contract.antiguedad_anos
dias_aguinaldo = 0
dias_proporcionales = 0
dias_trabajo = 0

if contract.antiguedad_anos < 1:
   antiguedad_anos = 1
else:
   antiguedad_anos = contract.antiguedad_anos

if contract.tablas_cfdi_id:
    line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad_anos)],order='antiguedad desc',limit=1)
    if line:
       dias_aguinaldo = line.aguinaldo

if worked_days.WORK100:
   dias_trabajo = dias_trabajo + worked_days.WORK100.number_of_days
if worked_days.SEPT:
   dias_trabajo = dias_trabajo + worked_days.SEPT.number_of_days
if worked_days.FJC:
   dias_trabajo = dias_trabajo + worked_days.FJC.number_of_days
if worked_days.VAC:
   dias_trabajo = dias_trabajo + worked_days.VAC.number_of_days
if worked_days.INC_MAT:
   dias_trabajo = dias_trabajo + worked_days.INC_MAT.number_of_days
#if worked_days.INC_EG:
#   dias_trabajo = dias_trabajo + worked_days.INC_EG.number_of_days
if worked_days.INC_RT:
   dias_trabajo = dias_trabajo + worked_days.INC_RT.number_of_days

if dias_trabajo > 0:
   dias_proporcionales = (dias_aguinaldo*dias_trabajo)/365
   total = dias_proporcionales * contract.sueldo_diario

monto_exento =  contract.tablas_cfdi_id.uma * 30

if total > monto_exento:
   result = round(total - monto_exento,2)
else:
   result = 0","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_83_1a3f51f8","Percepciones","P004","Aguinaldo",,"Aguinaldo","117","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_219_73008d2c","__export__.hr_salary_rule_218_425e2a23","0.0",,"True",,"result =  PE004 + PG004","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,"catalogo.percepciones02","Código Python"
"__export__.hr_salary_rule_183_0e63481e","Percepciones","P004","Aguinaldo liquidacion",,"Sueldos ordinaria","117","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_182_8ebcd470","__export__.hr_salary_rule_626","0.0",,"True",,"result =  PE004 + PG004","if worked_days.AGUI:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones02","Código Python"
"__export__.hr_salary_rule_373_705a4fee","Percepciones","P008","Devolución descuento",,"Sueldos ordinaria","125","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P008.amount","if inputs.P008:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_10","Percepciones","P009","Vacaciones",,"Sueldos ordinaria","130","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
dias_vacaciones = 0

if contract.antiguedad_anos < 1:
   antiguedad = 1
else:
   antiguedad = contract.antiguedad_anos

line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad)],order='antiguedad desc',limit=1)

if line:
   result = round(worked_days.VAC.number_of_days * contract.sueldo_diario,2)
else:
   result = 0","if worked_days.VAC:
   result = 1 > 0
else:
   result = 0 > 1","Todo el monto",,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_90_12f632dc","Percepciones","P009","Vacaciones liquidación",,"Sueldos ordinaria","131","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"dias_laborados = 0

if worked_days.VAC:
   dias_laborados = worked_days.VAC.number_of_days

result = round(contract.sueldo_diario*dias_laborados, 2)","if worked_days.VAC:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_192_2bff710f","Percepcion exenta","PE010","Prima vacacional exento",,"Sueldos ordinaria","135","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"25.0","103",,,"total = 0
dias_vacaciones = 0

if contract.antiguedad_anos < 1:
   antiguedad = 1
else:
   antiguedad = contract.antiguedad_anos

if worked_days.VAC:
   line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad)],order='antiguedad desc',limit=1)
   if line:
      prima_vac = line.prima_vac/100
   total = contract.sueldo_diario*worked_days.VAC.number_of_days*prima_vac
else:
   total = 0

monto_exento = 15 * contract.tablas_cfdi_id.uma
if contract.tablas_cfdi_id:
   line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad)],order='antiguedad desc',limit=1)
   if line:
      dias_vacaciones = line.vacaciones

monto_max = monto_exento / dias_vacaciones * worked_days.VAC.number_of_days
if total > monto_max:
      result = round(monto_max,2)
else:
      result = round(total,2)","if worked_days.VAC  and contract.tipo_prima_vacacional == '02' and not payslip.nom_liquidacion:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones16","Código Python"
"__export__.hr_salary_rule_194_d2ea3bcc","Percepcion exenta","PE010","Prima vacacional completo exento",,"Sueldos ordinaria","135","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"25.0","103",,,"total = 0

if contract.antiguedad_anos < 1:
   antiguedad = 1
else:
   antiguedad = contract.antiguedad_anos

if worked_days.PVC:
   line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad)],order='antiguedad desc',limit=1)
   if line:
      prima_vac = line.prima_vac/100
   total = contract.sueldo_diario*worked_days.PVC.number_of_days
else:
  total = 0

acum_exento = payslip.env['hr.payslip'].anual(employee, contract, payslip.date_from, 'PE010')
monto_exento =  contract.tablas_cfdi_id.uma * 15 - acum_exento

if total > monto_exento:
   result =  round(monto_exento,2)
else:
  result = round(total,2)","if worked_days.PVC:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones16","Código Python"
"__export__.hr_salary_rule_624","Percepcion exenta","PE010","Prima vacacional liquidación exento",,"Sueldos ordinaria","135","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"25.0",,,,"if contract.antiguedad_anos < 1:
   antiguedad = 1
else:
   antiguedad = contract.antiguedad_anos

if worked_days.VAC:
   line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad)],order='antiguedad desc',limit=1)
   if line:
      prima_vac = line.prima_vac/100
   total = contract.sueldo_diario*worked_days.VAC.number_of_days*prima_vac
else:
  total = 0

monto_exento =  contract.tablas_cfdi_id.uma * 15

if total > monto_exento:
   result =  round(monto_exento,2)
else:
  result = round(total,2)","if worked_days.VAC:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones16","Código Python"
"__export__.hr_salary_rule_193_3f9725ab","Percepcion gravada","PG010","Prima vacacional gravado",,"Sueldos ordinaria","136","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"25.0","103",,,"total = 0
dias_vacaciones = 0
if contract.antiguedad_anos < 1:
   antiguedad = 1
else:
   antiguedad = contract.antiguedad_anos

if worked_days.VAC:
   line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad)],order='antiguedad desc',limit=1)
   if line:
      prima_vac = line.prima_vac/100
   total = contract.sueldo_diario*worked_days.VAC.number_of_days*prima_vac
else:
   total = 0

monto_exento = 15 * contract.tablas_cfdi_id.uma
if contract.tablas_cfdi_id:
       line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad)],order='antiguedad desc',limit=1)
       if line:
          dias_vacaciones = line.vacaciones

monto_max = monto_exento / dias_vacaciones * worked_days.VAC.number_of_days
if total > monto_max:
      result = round(total - monto_max,2)
else:
      result = 0","if worked_days.VAC  and contract.tipo_prima_vacacional == '02' and not payslip.nom_liquidacion:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones16","Código Python"
"__export__.hr_salary_rule_195_fafa384e","Percepcion gravada","PG010","Prima vacacional completo gravado",,"Sueldos ordinaria","136","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"25.0","103",,,"if contract.antiguedad_anos < 1:
   antiguedad = 1
else:
   antiguedad = contract.antiguedad_anos

if worked_days.PVC:
   line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad)],order='antiguedad desc',limit=1)
   if line:
      prima_vac = line.prima_vac/100
   total = contract.sueldo_diario*worked_days.PVC.number_of_days
else:
  total = 0

acum_exento = payslip.env['hr.payslip'].anual(employee, contract, payslip.date_from, 'PE010')
monto_exento =  contract.tablas_cfdi_id.uma * 15 - acum_exento

if total > monto_exento:
   result =  round(total - monto_exento,2)
else:
   result = 0","if worked_days.PVC:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones16","Código Python"
"__export__.hr_salary_rule_625","Percepcion gravada","PG010","Prima vacacional liquidación gravado",,"Sueldos ordinaria","136","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"25.0",,,,"if contract.antiguedad_anos < 1:
   antiguedad = 1
else:
   antiguedad = contract.antiguedad_anos

if worked_days.VAC:
#  result = int(round(contract.sueldo_diario*worked_days.VAC.number_of_days*0.25))
   line = contract.env['tablas.antiguedades.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('antiguedad','<=',antiguedad)],order='antiguedad desc',limit=1)
   if line:
      prima_vac = line.prima_vac/100
   total = contract.sueldo_diario*worked_days.VAC.number_of_days*prima_vac
else:
  total = 0

monto_exento =  contract.tablas_cfdi_id.uma * 15

if total > monto_exento:
   result =  round(total - monto_exento,2)
else:
   result = 0","if worked_days.VAC:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones16","Código Python"
"__export__.hr_salary_rule_19","Percepciones","P010","Prima vacacional",,"Sueldos ordinaria","137","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_192_2bff710f","__export__.hr_salary_rule_193_3f9725ab","25.0","103","True",,"result = PG010 + PE010","if worked_days.VAC  and contract.tipo_prima_vacacional == '02' and not payslip.nom_liquidacion:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones16","Código Python"
"__export__.hr_salary_rule_91_a7667348","Percepciones","P010","Prima vacacional liquidación",,"Sueldos ordinaria","137","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_624","__export__.hr_salary_rule_625","25.0","103","True",,"result = PG010 + PE010","if worked_days.PVC:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones16","Código Python"
"__export__.hr_salary_rule_133_e4e4cdb2","Percepciones","P010","Prima vacacional completo",,"Sueldos ordinaria","137","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_194_d2ea3bcc","__export__.hr_salary_rule_195_fafa384e","25.0","103","True",,"result = PG010 + PE010","if worked_days.PVC:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones16","Código Python"
"__export__.hr_salary_rule_313_cf74a2d6","Percepcion exenta","PE011","Reparto de utilidades exento",,"Reparto de utilidades","140","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"25.0","103",,,"total = 0
if inputs.PTU:
   total = inputs.PTU.amount

monto_exento = contract.tablas_cfdi_id.uma * 15 

if total > monto_exento:
   result = round(monto_exento, 2)
else:
   result = round(inputs.PTU.amount, 2)","if inputs.PTU:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_314_a0dd8356","Percepcion gravada","PG011","Reparto de utilidades gravado",,"Reparto de utilidades","141","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"25.0","103",,,"total = 0
if inputs.PTU:
   total = inputs.PTU.amount

monto_exento = contract.tablas_cfdi_id.uma * 15 

if total > monto_exento:
   result = round(total - monto_exento, 2)
else:
   result = 0","if inputs.PTU:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_20","Percepciones","P011","Reparto de utilidades",,"Reparto de utilidades","142","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_313_cf74a2d6","__export__.hr_salary_rule_314_a0dd8356","0.0",,"True",,"result = PG011 + PE011","if inputs.PTU:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones03","Código Python"
"__export__.hr_salary_rule_16","Percepciones","P013","Gratificación",,"Sueldos ordinaria","145","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P013.amount","if inputs.P013:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_32","Percepciones","P015","Premio por asistencia",,"Sueldos ordinaria","150","Expresión Python","60.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = round(P001 * contract.bono_asistencia_amount/100, 2)","if contract.bono_asistencia:
   result = 1
else:
   result =  0","Todo el monto",,"catalogo.percepciones40","Código Python"
"__export__.hr_salary_rule_33","Percepciones","P016","Premio de puntualidad",,"Sueldos ordinaria","155","Expresión Python","140.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = round(P001 * 0.10, 2)","if contract.bono_puntualidad:
   result = 1
else:
   result =  0","Todo el monto",,"catalogo.percepciones08","Código Python"
"__export__.hr_salary_rule_376_9f0b8438","Percepciones","P017","Diferencia de sueldo",,"Sueldos ordinaria","160","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P017.amount","if inputs.P017:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_190_bc0b85aa","Percepcion exenta","PE019","Prima dominical exento",,"Sueldos ordinaria","165","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
dias = 0

if worked_days.PDM:
  total = contract.sueldo_diario*worked_days.PDM.number_of_days*0.25
  dias = worked_days.PDM.number_of_days
if worked_days.P019:
  total = contract.sueldo_diario*worked_days.P019.number_of_days*0.25
  dias = worked_days.P019.number_of_days

monto_exento = dias * contract.tablas_cfdi_id.uma
if total > monto_exento:
      result = round(monto_exento,2)
else:
      result = round(total,2)","if worked_days.PDM or worked_days.P019:
   result = 1 
else:
   result = 0","Todo el monto",,"catalogo.percepciones15","Código Python"
"__export__.hr_salary_rule_191_e9d15494","Percepcion gravada","PG019","Prima dominical gravado",,"Sueldos ordinaria","166","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
dias = 0

if worked_days.PDM:
  total = contract.sueldo_diario*worked_days.PDM.number_of_days*0.25
  dias = worked_days.PDM.number_of_days
if worked_days.P019:
  total = contract.sueldo_diario*worked_days.P019.number_of_days*0.25
  dias = worked_days.P019.number_of_days

monto_exento = dias * contract.tablas_cfdi_id.uma
if total > monto_exento:
   result = round(total - monto_exento,2)
else:
   result = 0","if worked_days.PDM or worked_days.P019:
   result = 1 
else:
   result = 0","Todo el monto",,"catalogo.percepciones15","Código Python"
"__export__.hr_salary_rule_31","Percepciones","P019","Prima dominical",,"Sueldos ordinaria","167","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_190_bc0b85aa","__export__.hr_salary_rule_191_e9d15494","0.0",,"True",,"result = PE019 + PG019","if worked_days.PDM or worked_days.P019:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones15","Código Python"
"__export__.hr_salary_rule_377_65184cab","Percepciones","P020","Dev. incentivo punt. o asist.",,"Sueldos ordinaria","170","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P020.amount","if inputs.P020:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_411_94565970","Percepcion exenta","P022E","Descanso-Festivo laborado exento",,"Sueldos ordinaria","175","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
monto_exento = 0

if worked_days.DFES:
  total = contract.sueldo_diario*worked_days.DFES.number_of_days * 2
if worked_days.DFES_3:
  total = total + contract.sueldo_diario*worked_days.DFES_3.number_of_days * 3

#revisar si el trabajador gana mas de un salario mínimo
if contract.sueldo_diario > contract.tablas_cfdi_id.uma:
   monto_exento =  total * 0.5

#revisar que lo exento no supere 5 SM
if monto_exento > (5 *contract.tablas_cfdi_id.uma):
   monto_exento =  5 *contract.tablas_cfdi_id.uma

result = round(monto_exento, 2)","if worked_days.DFES or worked_days.DFES_3:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_412_d86f119e","Percepcion gravada","P022G","Descanso-Festivo laborado gravado",,"Sueldos ordinaria","176","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
monto_exento = 0

if worked_days.DFES:
  total = contract.sueldo_diario*worked_days.DFES.number_of_days * 2
  monto_exento = contract.sueldo_diario*worked_days.DFES.number_of_days * 2
if worked_days.DFES_3:
  total = total + contract.sueldo_diario*worked_days.DFES_3.number_of_days * 3
  monto_exento = monto_exento + contract.sueldo_diario*worked_days.DFES_3.number_of_days * 3

#revisar si el trabajador gana mas de un salario mínimo
if contract.sueldo_diario > contract.tablas_cfdi_id.uma:
   monto_exento =  monto_exento * 0.5

#revisar que lo exento no supere 5 SM
if monto_exento > (5 *contract.tablas_cfdi_id.uma):
   monto_exento =  5 *contract.tablas_cfdi_id.uma

result = round(total  - monto_exento, 2)","if worked_days.DFES or worked_days.DFES_3:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_199_dad2f71a","Percepciones","P022","Descanso-Festivo laborado",,"Sueldos ordinaria","177","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_411_94565970","__export__.hr_salary_rule_412_d86f119e","0.0",,"True",,"result =  P022E + P022G","if worked_days.DFES or worked_days.DFES_3:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones33","Código Python"
"__export__.hr_salary_rule_378_cb65429a","Percepciones","P023","Dev. Infonavit",,"Sueldos ordinaria","180","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P023.amount","if inputs.P023:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_379_21289af2","Percepciones","P025","Devolución x desc. falta",,"Sueldos ordinaria","185","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P025.amount","if inputs.P025:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_380_950c9b5d","Percepciones","P028","Vacaciones económicas",,"Sueldos ordinaria","190","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P028.amount","if inputs.P028:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_381_25724f62","Percepciones","P030","Diferencia sueldo qna. anterior",,"Sueldos ordinaria","195","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P030.amount","if inputs.P030:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_382_3ed19afc","Percepciones","P033","Dev. caja de ahorro",,"Sueldos ordinaria","200","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P033.amount","if inputs.P033:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_383_2ed3a24a","Percepciones","P034","Préstamo caja de ahorro",,"Sueldos ordinaria","205","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P034.amount","if inputs.P034:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_197_f64ea9e5","Percepcion exenta","PE036","Vale de despensa exento",,"Sueldos ordinaria","210","Expresión Python","211.37",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
dias_laborados = 0

if worked_days.WORK100:
   dias_laborados = worked_days.WORK100.number_of_days
if worked_days.FJC:
   dias_laborados = dias_laborados + worked_days.FJC.number_of_days
if worked_days.VAC:
   dias_laborados = dias_laborados + worked_days.VAC.number_of_days

if inputs.DESP:
   if inputs.DESP.amount > 0:
      total = inputs.DESP.amount
else:
   total = contract.tablas_cfdi_id.uma * 0.40 * dias_laborados

acum_despensa = payslip.env['hr.payslip'].mensual(employee, contract, payslip.mes, 'P036')
acum_total = total + acum_despensa
monto_exento = contract.tablas_cfdi_id.uma * contract.tablas_cfdi_id.imss_mes

if acum_total > monto_exento:
      if monto_exento - acum_despensa < 0:
         result = 0
      else:
         result = round(monto_exento - acum_despensa, 2)
else:
      result = round(total, 2)","work = 0

if contract.vale_despensa:
   if inputs.DESP:
      if inputs.DESP.amount > 0:
         result = 1

   if worked_days.VAC:
      if worked_days.VAC.number_of_days > 0:
         work = 1

   if worked_days.WORK100:
      if worked_days.WORK100.number_of_days > 0:
         work = 1

   if payslip.nom_liquidacion:
        work = 0

result = work","Todo el monto",,"catalogo.percepciones24","Código Python"
"__export__.hr_salary_rule_196_a17ebdba","Percepcion gravada","PG036","Vale de despensa gravado",,"Sueldos ordinaria","211","Expresión Python","211.37",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
dias_laborados = 0

if worked_days.WORK100:
   dias_laborados = worked_days.WORK100.number_of_days
if worked_days.FJC:
   dias_laborados = dias_laborados + worked_days.FJC.number_of_days
if worked_days.VAC:
   dias_laborados = dias_laborados + worked_days.VAC.number_of_days

if inputs.DESP:
   if inputs.DESP.amount > 0:
      total = inputs.DESP.amount
else:
   total = contract.tablas_cfdi_id.uma *.40 * dias_laborados

acum_despensa = payslip.env['hr.payslip'].mensual(employee, contract, payslip.mes, 'P036')
acum_total = total + acum_despensa
monto_exento = contract.tablas_cfdi_id.uma * contract.tablas_cfdi_id.imss_mes
acum_exento = payslip.env['hr.payslip'].mensual(employee, contract, payslip.mes, 'PE036')
if acum_total > monto_exento:
   if acum_exento >= monto_exento: 
      result = round(total, 2)
   else:
      result = round(acum_total - monto_exento, 2)
else:
   result = 0","work = 0

if contract.vale_despensa:
   if inputs.DESP:
      if inputs.DESP.amount > 0:
         result = 1

   if worked_days.VAC:
      if worked_days.VAC.number_of_days > 0:
         work = 1

   if worked_days.WORK100:
      if worked_days.WORK100.number_of_days > 0:
         work = 1

   if payslip.nom_liquidacion:
        work = 0

result = work","Todo el monto",,"catalogo.percepciones24","Código Python"
"__export__.hr_salary_rule_64_51ca39bc","Percepciones","P036","Vale de despensa",,"Sueldos ordinaria","212","Expresión Python","211.37",,"Especie",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_197_f64ea9e5","__export__.hr_salary_rule_196_a17ebdba","0.0",,"True",,"result = PE036 + PG036

# Tope exento ISR 1 uma por dia
# tope exento IMSS .4 uma por dia","work = 0

if contract.vale_despensa:
   if inputs.DESP:
      if inputs.DESP.amount > 0:
         result = 1

   if worked_days.VAC:
      if worked_days.VAC.number_of_days > 0:
         work = 1

   if worked_days.WORK100:
      if worked_days.WORK100.number_of_days > 0:
         work = 1

   if payslip.nom_liquidacion:
        work = 0

result = work","Todo el monto",,"catalogo.percepciones24","Código Python"
"__export__.hr_salary_rule_178_3964d4db","Percepciones","P037","Bono por desempeño",,"Sueldos ordinaria","215","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.P037:
   if payslip.retardo:
      result = 0
   else:
      result = inputs.P037.amount
else:
   result =0","if inputs.P037:
   if inputs.P037.amount > 0:
      result = 1
   else:
      result = 0","Todo el monto",,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_183_3a2caedc","Percepcion exenta","PE040","Viaticos",,"Comprobación viáticos","220","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.P040:
   result = inputs.P040.amount
else:
   result =0","if inputs.P040:
   if inputs.P040.amount > 0:
      result = 1
   else:
      result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_181_17fd119b","Percepciones","P040","Viaticos",,"Comprobación viáticos","222","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = PE040","if inputs.P040:
   if inputs.P040.amount > 0:
      result = 1
   else:
      result = 0","Todo el monto",,"catalogo.percepciones41","Código Python"
"__export__.hr_salary_rule_17","Percepcion exenta","PE103","Indemnización exenta",,"Liquidación - indemnizacion/finiquito","230","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
if inputs.IND:
   total = inputs.IND.amount
if inputs.PPS:
   total = total + inputs.PPS.amount
if inputs.PDA:
   total = total + inputs.PDA.amount

if contract.antiguedad_anos < 1:
   antiguedad_anos = 1
else:
   antiguedad_anos = round(payslip.env['hr.contract'].antiguedad_to(contract, payslip.date_to))

monto_exento = contract.tablas_cfdi_id.uma * antiguedad_anos * 90 

if total > monto_exento:
   result = round(monto_exento * (inputs.IND.amount / total),2)
else:
   result = inputs.IND.amount
","if inputs.IND:
   result =  1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_212_54b36a45","Percepcion gravada","PG103","Indemnización gravada",,"Liquidación - indemnizacion/finiquito","231","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
if inputs.IND:
   total = inputs.IND.amount
if inputs.PPS:
   total = total + inputs.PPS.amount
if inputs.PDA:
   total = total + inputs.PDA.amount

if contract.antiguedad_anos < 1:
   antiguedad_anos = 1
else:
   antiguedad_anos = round(payslip.env['hr.contract'].antiguedad_to(contract, payslip.date_to))

monto_exento = contract.tablas_cfdi_id.uma * antiguedad_anos * 90 

if total > monto_exento:
   result = round(inputs.IND.amount - monto_exento * (inputs.IND.amount / total),2)
else:
   result = 0
","if inputs.IND:
   result =  1
else:
   result = 0","Todo el monto",,"catalogo.percepciones20","Código Python"
"__export__.hr_salary_rule_213_7db74dd8","Percepciones","P103","Indemnización",,"Liquidación - indemnizacion/finiquito","232","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_17","__export__.hr_salary_rule_212_54b36a45","0.0",,"True",,"result = PE103 + PG103
","if inputs.IND:
   result =  1
else:
   result = 0","Todo el monto",,"catalogo.percepciones20","Código Python"
"__export__.hr_salary_rule_18","Percepcion exenta","PE104","Prima de antiguedad exento",,"Liquidación - indemnizacion/finiquito","235","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
if inputs.IND:
   total = inputs.IND.amount
if inputs.PPS:
   total = total + inputs.PPS.amount
if inputs.PDA:
   total = total + inputs.PDA.amount

if contract.antiguedad_anos < 1:
   antiguedad_anos = 1
else:
   antiguedad_anos = round(payslip.env['hr.contract'].antiguedad_to(contract, payslip.date_to))

monto_exento = contract.tablas_cfdi_id.uma * antiguedad_anos * 90 

if total > monto_exento:
   result = round(monto_exento * (inputs.PDA.amount / total),2)
else:
   result = round(inputs.PDA.amount,2)","if inputs.PDA:
   result =  1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_216_9bcae126","Percepcion gravada","PG104","Prima de antiguedad gravado",,"Liquidación - indemnizacion/finiquito","236","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
if inputs.IND:
   total = inputs.IND.amount
if inputs.PPS:
   total = total + inputs.PPS.amount
if inputs.PDA:
   total = total + inputs.PDA.amount

if contract.antiguedad_anos < 1:
   antiguedad_anos = 1
else:
   antiguedad_anos = round(payslip.env['hr.contract'].antiguedad_to(contract, payslip.date_to))

monto_exento = contract.tablas_cfdi_id.uma * antiguedad_anos * 90 

if total > monto_exento:
   result = round(inputs.PDA.amount - monto_exento * (inputs.PDA.amount / total),2)
else:
   result = 0","if inputs.PDA:
   result =  1
else:
   result = 0","Todo el monto",,"catalogo.percepciones17","Código Python"
"__export__.hr_salary_rule_217_61f36af9","Percepciones","P104","Prima de antiguedad",,"Liquidación - indemnizacion/finiquito","237","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_18","__export__.hr_salary_rule_216_9bcae126","0.0",,"True",,"result = PE104 + PG104","if inputs.PDA:
   result =  1
else:
   result = 0","Todo el monto",,"catalogo.percepciones17","Código Python"
"__export__.hr_salary_rule_138_4e8fdd73","Percepcion exenta","PE105","Pagos por separación exento",,"Liquidación - indemnizacion/finiquito","240","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
if inputs.IND:
   total = inputs.IND.amount
if inputs.PPS:
   total = total + inputs.PPS.amount
if inputs.PDA:
   total = total + inputs.PDA.amount

if contract.antiguedad_anos < 1:
   antiguedad_anos = 1
else:
   antiguedad_anos = round(payslip.env['hr.contract'].antiguedad_to(contract, payslip.date_to))

monto_exento = contract.tablas_cfdi_id.uma * contract.antiguedad_anos * 90 

if total > monto_exento:
   result = round(monto_exento * (inputs.PPS.amount / total),2)
else:
   result = inputs.PPS.amount","if inputs.PPS:
   result =  1
else:
   result = 0","Todo el monto",,"catalogo.percepciones18","Código Python"
"__export__.hr_salary_rule_214_ac3e9608","Percepcion gravada","PG105","Pagos por separación gravado",,"Liquidación - indemnizacion/finiquito","241","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
if inputs.IND:
   total = inputs.IND.amount
if inputs.PPS:
   total = total + inputs.PPS.amount
if inputs.PDA:
   total = total + inputs.PDA.amount

if contract.antiguedad_anos < 1:
   antiguedad_anos = 1
else:
   antiguedad_anos = round(payslip.env['hr.contract'].antiguedad_to(contract, payslip.date_to))

monto_exento = contract.tablas_cfdi_id.uma * contract.antiguedad_anos * 90 

if total > monto_exento:
   result = round(inputs.PPS.amount - monto_exento * (inputs.PPS.amount / total),2)
else:
   result = 0","if inputs.PPS:
   result =  1
else:
   result = 0","Todo el monto",,"catalogo.percepciones18","Código Python"
"__export__.hr_salary_rule_215_d6327333","Percepciones","P105","Pagos por separación",,"Liquidación - indemnizacion/finiquito","242","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_138_4e8fdd73","__export__.hr_salary_rule_214_ac3e9608","0.0",,"True",,"result = PE105 + PG105","if inputs.PPS:
   result =  1
else:
   result = 0","Todo el monto",,"catalogo.percepciones18","Código Python"
"__export__.hr_salary_rule_385_364c9e80","Percepciones","P200","Préstamo personal",,"Sueldos ordinaria","245","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P200.amount","if inputs.P200:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_386_25e7b446","Percepciones","P201","Permiso por alumbramiento",,"Sueldos ordinaria","250","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P201.amount","if inputs.P201:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_387_01a64d90","Percepciones","P202","Permiso por defunción",,"Sueldos ordinaria","255","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P202.amount","if inputs.P202:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_388_552b712c","Percepciones","P203","Permiso por matrimonio",,"Sueldos ordinaria","260","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.P203.amount","if inputs.P203:
   result = 1
else:
   result = 0",,,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_86_d3335d9c","Percepciones","P204","Comisiones",,"Sueldos ordinaria","265","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.P204:
   result = inputs.P204.amount
else:
   result =0","if inputs.P204:
   if inputs.P204.amount > 0:
      result = 1
   else:
      result = 0","Todo el monto",,"catalogo.percepciones23","Código Python"
"__export__.hr_salary_rule_87_ca7560d9","Percepciones","P205","Compensaciones",,"Sueldos ordinaria","270","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.P205:
   result = inputs.P205.amount
else:
   result = 0","if inputs.P205:
   if inputs.P205.amount > 0:
      result = 1
   else:
      result = 0","Todo el monto",,"catalogo.percepciones33","Código Python"
"__export__.hr_salary_rule_123_34d825c6","Percepciones","P206","Incentivo de productividad",,"Sueldos ordinaria","275","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = round(P001 * contract.bono_puntualidad_amount / 100, 2)","if contract.bono_puntualidad:
   result = 1
else:
   result =  0","Todo el monto",,"catalogo.percepciones33","Código Python"
"__export__.hr_salary_rule_307_a7c34c4e","Percepciones","P208","Percepcion adicional",,"Sueldos ordinaria","285","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,"True",,"result =  round(contract.percepcion_adicional.amount, 2)","if contract.percepcion_adicional and payslip.no_nomina == '2':
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones35","Código Python"
"__export__.hr_salary_rule_188_802f2800","Percepcion exenta","PE041","Fondo ahorro empresa exento",,"Sueldos ordinaria","286","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = P001 * .3

monto_exencion = 1.30 * contract.tablas_cfdi_id.uma * contract.tablas_cfdi_id.imss_mes
if total > monto_exencion:
   result =round( monto_exencion, 2)
else:
   result = round(total, 2)
","if worked_days.WORK100 and contract.fondo_ahorro:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones05","Código Python"
"__export__.hr_salary_rule_189_4e1017bc","Percepcion gravada","PG041","Fondo ahorro empresa gravado",,"Sueldos ordinaria","287","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = P001 * .3

monto_exencion = 1.30 * contract.tablas_cfdi_id.uma * contract.tablas_cfdi_id.imss_mes
if total > monto_exencion:
   result = round(total - monto_exencion, 2)
else:
   result = 0","if worked_days.WORK100 and contract.fondo_ahorro:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones05","Código Python"
"__export__.hr_salary_rule_148_c0efbcdb","Percepciones","P041","Fondo ahorro empresa",,"Sueldos ordinaria","288","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_188_802f2800","__export__.hr_salary_rule_189_4e1017bc","0.0",,"True",,"result = PE041 + PG041","if worked_days.WORK100 and contract.fondo_ahorro:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones05","Código Python"
"__export__.hr_salary_rule_170_50c18641","Percepciones","P209","Alimentación",,"Sueldos ordinaria","290","Expresión Python","0.0",,"Especie",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = round(P001 * contract.alimentacion_amount / 100, 2)","if contract.alimentacion:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones24","Código Python"
"__export__.hr_salary_rule_413_369bcc37","Percepcion exenta","PE006","Horas extras simples exento",,"Sueldos ordinaria","295","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if contract.sueldo_diario > contract.tablas_cfdi_id.salario_minimo:
   result =  round(contract.sueldo_diario/8 * worked_days.HEX1.number_of_hours * 0.5, 2)
else:
   result =  round(contract.sueldo_diario/8 * worked_days.HEX1.number_of_hours, 2)","if worked_days.HEX1:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_414_6c22f0ea","Percepcion gravada","PG006","Horas extras simples gravado",,"Sueldos ordinaria","296","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if contract.sueldo_diario > contract.tablas_cfdi_id.salario_minimo:
   result =  round(contract.sueldo_diario/8 * worked_days.HEX1.number_of_hours * 0.5, 2)
else:
   result =  0","if worked_days.HEX1:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_415_b5c6383d","Percepciones","HEX1","Horas extras simples",,"Sueldos ordinaria","297","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_413_369bcc37","__export__.hr_salary_rule_414_6c22f0ea","0.0",,"True",,"result = PE006 + PG006
","if worked_days.HEX1:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones14","Código Python"
"__export__.hr_salary_rule_394_f6a5696b","Percepciones","PG007","Horas extras triples gravado",,"Sueldos ordinaria","298","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result =  round(contract.sueldo_diario/8 * worked_days.HEX3.number_of_hours * 3, 2)
","if worked_days.HEX3:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_302_2fbfb1a4","Percepcion exenta","PE042","Pago fondo ahorro exento",,"Sueldos ordinaria","300","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"monto_exento = 1.3 * contract.tablas_cfdi_id.uma * 365

if inputs.PFA:
   if inputs.P042.amount < monto_exento:
      result = round(inputs.PFA.amount, 2)
   else:
      result = round(monto_exento, 2)
else:
   result =0","if inputs.PFA:
   if inputs.PFA.amount > 0:
       result = 1
   else:
       result = 0
else:
   result = 0","Todo el monto",,"catalogo.percepciones05","Código Python"
"__export__.hr_salary_rule_303_2e625dda","Percepcion gravada","PG042","Pago fondo ahorro gravado",,"Sueldos ordinaria","301","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"monto_exento = 1.3 * contract.tablas_cfdi_id.uma * 365

if inputs.PFA:
   if inputs.PFA.amount < monto_exento:
      result = 0
   else:
      result = round(inputs.PFA.amount - monto_exento, 2)
else:
   result =0","if inputs.PFA:
   if inputs.PFA.amount > 0:
       result = 1
   else:
       result = 0
else:
   result = 0","Todo el monto",,"catalogo.percepciones05","Código Python"
"__export__.hr_salary_rule_82_5c61b487","Percepciones","P042","Pago fondo ahorro",,"Sueldos ordinaria","302","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_302_2fbfb1a4","__export__.hr_salary_rule_303_2e625dda","0.0",,"True",,"result = PG042 + PE042","if inputs.PFA:
   if inputs.PFA.amount > 0:
       result = 1
   else:
       result = 0
else:
   result = 0","Todo el monto",,"catalogo.percepciones05","Código Python"
"__export__.hr_salary_rule_416_dc06d7a3","Percepciones","HEX3","Horas extras triples",,"Sueldos ordinaria","302","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,"__export__.hr_salary_rule_394_f6a5696b","0.0",,"True",,"result =  PG007","if worked_days.HEX3:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones14","Código Python"
"__export__.hr_salary_rule_293_0b3af3bd","Percepcion exenta","PE043","Tiempo extra exento",,"Sueldos ordinaria","305","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"monto_exento = 0
horas_exentas = 0
horas_extras = 0
monto_total = 0
monto_max_exento = 0

if contract.periodicidad_pago == '02':
   horas_exentas = 9
if contract.periodicidad_pago == '04':
   horas_exentas = 19.28

monto_max_exento =  contract.sueldo_diario/8 * horas_exentas * 2

#si supera el monto exento maximo
if inputs.P043.amount > monto_max_exento:
   monto_exento = monto_max_exento
   monto_total = inputs.P043.amount - monto_max_exento
else:
   monto_exento = inputs.P043.amount
   monto_total = inputs.P043.amount

#revisar si el trabajador gana mas de un salario mínimo
if contract.sueldo_diario > contract.tablas_cfdi_id.salario_minimo:
   monto_exento =  monto_exento * 0.5

#revisar que lo exento no supere 5 SM
if monto_exento > (5 *contract.tablas_cfdi_id.salario_minimo):
   monto_exento =  5 *contract.tablas_cfdi_id.salario_minimo

result = round(monto_exento, 2)","if inputs.P043:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_294_db483224","Percepcion gravada","PG043","Tiempo extra gravado",,"Sueldos ordinaria","306","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"monto_exento = 0
horas_exentas = 0
horas_extras = 0
monto_total = 0

if contract.periodicidad_pago == '02':
   horas_exentas = 9
if contract.periodicidad_pago == '04':
   horas_exentas = 19.28

monto_max_exento =  contract.sueldo_diario/8 * horas_exentas * 2

#si supera el monto exento maximo
if inputs.P043.amount > monto_max_exento:
   monto_exento = monto_max_exento
   #monto_total = inputs.P043.amount - monto_max_exento
else:
   monto_exento = inputs.P043.amount
   #monto_total = inputs.P043.amount

#revisar si el trabajador gana mas de un salario mínimo
if contract.sueldo_diario > contract.tablas_cfdi_id.salario_minimo:
   monto_exento =  monto_exento * 0.5

#revisar que lo exento no supere 5 SM
if monto_exento > (5 *contract.tablas_cfdi_id.salario_minimo):
   monto_exento =  5 *contract.tablas_cfdi_id.salario_minimo

result = round(inputs.P043.amount - monto_exento, 2)","if inputs.P043:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_295_5891d6c3","Percepciones","P043","Tiempo extra",,"Sueldos ordinaria","307","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,"__export__.hr_salary_rule_293_0b3af3bd","__export__.hr_salary_rule_294_db483224","0.0",,"True",,"result = PE043 + PG043","if inputs.P043:
   result = 1
else:
   result = 0","Todo el monto",,"catalogo.percepciones01","Código Python"
"__export__.hr_salary_rule_184_7f7908a8","Deducciones","D003","Ajuste en viáticos entregados al trabajador",,"Comprobación viáticos","340","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.DVIAT:
   result = inputs.DVIAT.amount
else:
   result =0","if inputs.DVIAT:
   if inputs.DVIAT.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_75_eae34899","Deducciones","D064","Prestamo empresa",,"Sueldos ordinaria","364","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result =  contract.prest_financ","result = 0","Todo el monto","catalogos.deduccion12",,"Código Python"
"__export__.hr_salary_rule_137_80af394c","Deducciones","D065","Interés prestamo empresa",,"Sueldos ordinaria","365","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.D013.amount","if inputs.D013:
   if inputs.D013.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_81_bbaef598","Deducciones","D067","Fondo de ahorro",,"Sueldos ordinaria","367","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = round(P001 * .075, 2)","if worked_days.WORK100 and contract.fondo_ahorro:
   result = 1
else:
   result = 0","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_135_e8669594","Deducciones","D068","Fondo de ahorro empresa",,"Sueldos ordinaria","368","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = round(P001 * .075, 2)","if worked_days.WORK100 and contract.fondo_ahorro:
   result = 1
else:
   result = 0","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_136_a55f5e51","Deducciones","D072","Prestamo fondo de ahorro",,"Sueldos ordinaria","372","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.D009.amount","if inputs.D009:
   if inputs.D009.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_147_06d1d785","Deducciones","D073","Interés prestamo fondo de ahorro",,"Sueldos ordinaria","373","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.D009.amount","if inputs.D009:
   if inputs.D009.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_171_fb81c220","Deducciones","D089","Anticipo de gastos no comprobados",,"Sueldos ordinaria","389","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.AGNC:
   result = inputs.AGNC.amount
else:
   result =0","if inputs.AGNC:
   result =  1>0
else:
   result = 0>1","Todo el monto",,,"Código Python"
"nomina_cfdi_extras.dev_emp_loan_installment","Deducciones","390","Préstamo",,"Sueldos ordinaria","390","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = (payslip.installment_amount or 0)","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"nomina_cfdi_extras_ee.dev_emp_loan_installment","Deducciones","390","Préstamo",,"Sueldos ordinaria","390","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = (payslip.installment_amount or 0)","result = (payslip.installment_amount or 0)","Todo el monto","catalogos.deduccion04",,"Código Python"
"nomina_cfdi_extras.dev_emp_loan_interest_installment","Deducciones","391","Interés del préstamo",,"Sueldos ordinaria","391","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = (payslip.installment_int or 0)","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"nomina_cfdi_extras_ee.dev_emp_loan_interest_installment","Deducciones","391","Interés del préstamo",,"Sueldos ordinaria","391","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = (payslip.installment_int or 0)","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_38","Auxiliar","TPERE","Total Percepcion exento",,"Sueldos ordinaria","397","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,,,"Código Python"
"__export__.hr_salary_rule_544_c2506f2e","Auxiliar","TPERE","Total Percepcion exento",,"Comprobación viáticos","397","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,,,"Código Python"
"__export__.hr_salary_rule_555_49bdc04f","Auxiliar","TPERE","Total Percepcion exento",,"Entrega Viaticos","397","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,,,"Código Python"
"__export__.hr_salary_rule_561_84914fd3","Auxiliar","TPERE","Total Percepcion exento",,"Liquidación - indemnizacion/finiquito","397","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,,,"Código Python"
"__export__.hr_salary_rule_567_cfd8c40e","Auxiliar","TPERE","Total Percepcion exento",,"Reparto de utilidades","397","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,,,"Código Python"
"__export__.hr_salary_rule_578_b258d5c9","Auxiliar","TPERE","Total Percepcion exento",,"Aguinaldo","397","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,,,"Código Python"
"__export__.hr_salary_rule_587_39bd3f44","Auxiliar","TPERE","Total Percepcion exento",,"Asimilado","397","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10",,,,"Código Python"
"__export__.hr_salary_rule_37","Auxiliar","TPERG","Total Percepciones Gravadas",,"Sueldos ordinaria","398","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW - categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_545_e511ccc6","Auxiliar","TPERG","Total Percepciones Gravadas",,"Comprobación viáticos","398","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW - categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_556_46025d6d","Auxiliar","TPERG","Total Percepciones Gravadas",,"Entrega Viaticos","398","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW - categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_562_5ff6bf2e","Auxiliar","TPERG","Total Percepciones Gravadas",,"Liquidación - indemnizacion/finiquito","398","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW - categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_568_f4f1b1a6","Auxiliar","TPERG","Total Percepciones Gravadas",,"Reparto de utilidades","398","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW - categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_579_06b00a47","Auxiliar","TPERG","Total Percepciones Gravadas",,"Aguinaldo","398","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW - categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_588_d78b5e3c","Auxiliar","TPERG","Total Percepciones Gravadas",,"Asimilado","398","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW - categories.ALW2","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_34","Auxiliar","TPER","Total Percepciones",,"Sueldos ordinaria","399","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = TPERG + TPERE","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_546_d572b6c8","Auxiliar","TPER","Total Percepciones",,"Comprobación viáticos","399","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = TPERG + TPERE","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_557_afbc6528","Auxiliar","TPER","Total Percepciones",,"Entrega Viaticos","399","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = TPERG + TPERE","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_563_cc0aa453","Auxiliar","TPER","Total Percepciones",,"Liquidación - indemnizacion/finiquito","399","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = TPERG + TPERE","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_569_91eb5109","Auxiliar","TPER","Total Percepciones",,"Reparto de utilidades","399","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = TPERG + TPERE","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_580_2f45810a","Auxiliar","TPER","Total Percepciones",,"Aguinaldo","399","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = TPERG + TPERE","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_589_cd960e5a","Auxiliar","TPER","Total Percepciones",,"Asimilado","399","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = TPERG + TPERE","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_154_945257be","Otros Pagos","O001","Subsidio para el empleo (sp) PTU",,"Reparto de utilidades","400","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = 0","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0   
grabado_mensual = 0

grabado_mensual = TPERG

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual

if subsidio_empleo <= 0:
    result = 0
else:
   result =  1","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_551_28f506ab","Otros Pagos","O001","Subsidio para el empleo (sp)",,"Comprobación viáticos","400","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0","catalogo.otropago02",,,"0.0",,,,"result = 0","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
dias_periodo_mes = 0
dias_periodo = 0

if contract.periodicidad_pago == '02' and payslip.isr_ajustar:
   dias_periodo_mes = payslip.dias_periodo
   dias_periodo = 7 * float(payslip.no_nomina)
else:
   dias_periodo_mes = contract.tablas_cfdi_id.imss_mes
   dias_periodo = payslip.dias_pagar

#grabado_mensual
if float(payslip.no_nomina) > 1 and payslip.isr_ajustar:
        grabado_mensual = (TPERG + payslip.acum_per_grav) / dias_periodo * dias_periodo_mes
else:
        grabado_mensual = TPERG  / dias_periodo * dias_periodo_mes

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
if subsidio_empleo <= 0:
    result = 0
else:
   result =  1","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_552_41cc0132","Otros Pagos","O001","Subsidio para el empleo (sp)",,"Entrega Viaticos","400","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0","catalogo.otropago02",,,"0.0",,,,"result = 0","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
dias_periodo_mes = 0
dias_periodo = 0

if contract.periodicidad_pago == '02' and payslip.isr_ajustar:
   dias_periodo_mes = payslip.dias_periodo
   dias_periodo = 7 * float(payslip.no_nomina)
else:
   dias_periodo_mes = contract.tablas_cfdi_id.imss_mes
   dias_periodo = payslip.dias_pagar

#grabado_mensual
if float(payslip.no_nomina) > 1 and payslip.isr_ajustar:
        grabado_mensual = (TPERG + payslip.acum_per_grav) / dias_periodo * dias_periodo_mes
else:
        grabado_mensual = TPERG  / dias_periodo * dias_periodo_mes

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
if subsidio_empleo <= 0:
    result = 0
else:
   result =  1","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_575_fc8ff50d","Otros Pagos","O001","Subsidio para el empleo (sp)",,"Aguinaldo","400","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0","catalogo.otropago02",,,"0.0",,,,"result = 0","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
dias_periodo_mes = 0
dias_periodo = 0

if contract.periodicidad_pago == '02' and payslip.isr_ajustar:
   dias_periodo_mes = payslip.dias_periodo
   dias_periodo = 7 * float(payslip.no_nomina)
else:
   dias_periodo_mes = contract.tablas_cfdi_id.imss_mes
   dias_periodo = payslip.dias_pagar

#grabado_mensual
if float(payslip.no_nomina) > 1 and payslip.isr_ajustar:
        grabado_mensual = (TPERG + payslip.acum_per_grav) / dias_periodo * dias_periodo_mes
else:
        grabado_mensual = TPERG  / dias_periodo * dias_periodo_mes

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
if subsidio_empleo <= 0:
    result = 0
else:
   result =  1","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_161_dd02c746","Otros Pagos","O003","Viaticos",,"Entrega Viaticos","405","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.VIAT:
   result = inputs.VIAT.amount
else:
   result =0","if inputs.VIAT:
   if inputs.VIAT.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_1091_33bc0404","Otros Pagos","O004","Reintegro de ISR retenido en exceso de ejercicio anterior",,"Sueldos ordinaria","410","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0","catalogo.otropago05",,,"0.0",,,,"if inputs.O004:
   result = inputs.O004.amount
else:
   result =0","if inputs.O004:
   result = inputs.O004.amount
else:
   result =0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_1080_bb00413c","Otros Pagos","O005","ISR a retener por subsidio entregado que no correspondia",,"Sueldos ordinaria","415","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0","catalogo.otropago07",,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
grabado_mensual = TPERG + payslip.acum_per_grav
if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
    limite_inferior = line.lim_inf
    cuota_fija = line.c_fija
    porcentaje_sobre_excedente = line.s_excedente

if line3:
    subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
op_ajuste_subem_causado = 0
op_ajuste_subem = 0
desc_dev_isr = 0
desc_isr_ret_subem_entregado = 0
desc_dev_subem = 0
subem_entregar =  0
factor01 = 0
isr_retener = 0

if isr_tarifa_113 > subsidio_empleo:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
          desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
          desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
       else:
          desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          if payslip.acum_subsidio_aplicado > 0:
             op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
   elif payslip.acum_subsidio_aplicado > 0 and subsidio_empleo > 0:
          if payslip.acum_subsidio_aplicado > subsidio_empleo:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado - subsidio_empleo
             op_isr_ajuste = payslip.acum_subsidio_aplicado - subsidio_empleo
             op_ajuste_subem_causado = payslip.acum_subsidio_aplicado - subsidio_empleo
          else:
             result = 0
   else:
      result = 0
else:
   subem_entregar = subsidio_empleo - isr_tarifa_113
   if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
      factor01 = payslip.acum_isr_antes_subem
   else:
      factor01 = payslip.acum_subsidio_aplicado
   subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

result = round(desc_isr_ret_subem_entregado, 2)","limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
work =  0

if TPERG > 0:
      work = 1

if payslip.ultima_nomina and payslip.isr_ajustar and work > 0:
#########################################################
##################  #dias del periodo   ####################### 
#########################################################
   line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
   if line2:
      dias_periodo = line2.no_dias
   else:
      dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
   grabado_mensual = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
      line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

   if line:
      limite_inferior = line.lim_inf
      cuota_fija = line.c_fija
      porcentaje_sobre_excedente = line.s_excedente

   if line3:
      subsidio_empleo = line3.s_mensual

   #articulo 113
   excedente_limite_superior = grabado_mensual - limite_inferior
   impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
   isr_tarifa_113 = impuesto_marginal + cuota_fija

   op_isr_ajuste = 0
   op_ajuste_subem_causado = 0
   op_ajuste_subem = 0
   desc_dev_isr = 0
   desc_isr_ret_subem_entregado = 0
   desc_dev_subem = 0
   subem_entregar =  0
   factor01 = 0
   isr_retener = 0

   if isr_tarifa_113 > subsidio_empleo:
      isr_retener = isr_tarifa_113 - subsidio_empleo
      isr_retener = isr_retener - payslip.acum_isr
      if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
             desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
          else:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
          if subsidio_empleo == 0:
             if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
                op_isr_ajuste = payslip.acum_isr_antes_subem
             else:
                op_isr_ajuste = payslip.acum_subsidio_aplicado
             if payslip.acum_subsidio_aplicado > 0:
                op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
      elif payslip.acum_subsidio_aplicado > 0 and subsidio_empleo > 0:
             if payslip.acum_subsidio_aplicado > subsidio_empleo:
                desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado - subsidio_empleo
                op_isr_ajuste = payslip.acum_subsidio_aplicado - subsidio_empleo
                op_ajuste_subem_causado = payslip.acum_subsidio_aplicado - subsidio_empleo
             else:
                result = 0
      else:
         result = 0
   else:
      subem_entregar = subsidio_empleo - isr_tarifa_113
      if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
         factor01 = payslip.acum_isr_antes_subem
      else:
         factor01 = payslip.acum_subsidio_aplicado
      subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

   if desc_isr_ret_subem_entregado > 0:
     result = 1
   else:
     result = 0
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_424_58b41c82","Otros Pagos","O006","Devolución de SUBEM efectivamente entregado",,"Sueldos ordinaria","420","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0","catalogo.otropago09",,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
grabado_mensual = TPERG + payslip.acum_per_grav
if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
    limite_inferior = line.lim_inf
    cuota_fija = line.c_fija
    porcentaje_sobre_excedente = line.s_excedente

if line3:
    subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
op_ajuste_subem_causado = 0
op_ajuste_subem = 0
desc_dev_isr = 0
desc_isr_ret_subem_entregado = 0
desc_dev_subem = 0
subem_entregar =  0
factor01 = 0
isr_retener = 0

if isr_tarifa_113 > subsidio_empleo:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
          desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
          desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
       else:
          desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          if payslip.acum_subsidio_aplicado > 0:
             op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
   else:
      result = 0
else:
   subem_entregar = subsidio_empleo - isr_tarifa_113
   if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
      factor01 = payslip.acum_isr_antes_subem
   else:
      factor01 = payslip.acum_subsidio_aplicado
   subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

result = round(desc_dev_subem,2)","limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
work =  0

if TPERG > 0:
      work = 1

if payslip.ultima_nomina and payslip.isr_ajustar and work > 0:
#########################################################
##################  #dias del periodo   ####################### 
#########################################################
   line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
   if line2:
      dias_periodo = line2.no_dias
   else:
      dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
   grabado_mensual = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
      line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

   if line:
      limite_inferior = line.lim_inf
      cuota_fija = line.c_fija
      porcentaje_sobre_excedente = line.s_excedente

   if line3:
      subsidio_empleo = line3.s_mensual

   #articulo 113
   excedente_limite_superior = grabado_mensual - limite_inferior
   impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
   isr_tarifa_113 = impuesto_marginal + cuota_fija

   op_isr_ajuste = 0
   op_ajuste_subem_causado = 0
   op_ajuste_subem = 0
   desc_dev_isr = 0
   desc_isr_ret_subem_entregado = 0
   desc_dev_subem = 0
   subem_entregar =  0
   factor01 = 0
   isr_retener = 0

   if isr_tarifa_113 > subsidio_empleo:
      isr_retener = isr_tarifa_113 - subsidio_empleo
      isr_retener = isr_retener - payslip.acum_isr
      if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
             desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
          else:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
          if subsidio_empleo == 0:
             if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
                op_isr_ajuste = payslip.acum_isr_antes_subem
             else:
                op_isr_ajuste = payslip.acum_subsidio_aplicado
             if payslip.acum_subsidio_aplicado > 0:
                op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
      else:
         result = 0
   else:
      subem_entregar = subsidio_empleo - isr_tarifa_113
      if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
         factor01 = payslip.acum_isr_antes_subem
      else:
         factor01 = payslip.acum_subsidio_aplicado
      subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

   if desc_dev_subem > 0:
     result = 1
   else:
     result = 0
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_1085_38cac23d","Otros Pagos","O007","Devolución ISR",,"Sueldos ordinaria","425","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0","catalogo.otropago01",,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
grabado_mensual = TPERG + payslip.acum_per_grav
if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
    limite_inferior = line.lim_inf
    cuota_fija = line.c_fija
    porcentaje_sobre_excedente = line.s_excedente

if line3:
    subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
op_ajuste_subem_causado = 0
op_ajuste_subem = 0
desc_dev_isr = 0
desc_isr_ret_subem_entregado = 0
desc_dev_subem = 0
subem_entregar =  0
factor01 = 0
isr_retener = 0

if isr_tarifa_113 > subsidio_empleo:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
          desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
          desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
       else:
          desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          if payslip.acum_subsidio_aplicado > 0:
             op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
   else:
      result = 0
else:
      if subsidio_empleo - isr_tarifa_113  < payslip.acum_isr:
          subem_entregar = payslip.acum_isr
      elif  subsidio_empleo > isr_tarifa_113 and payslip.acum_isr > 0:
          subem_entregar = payslip.acum_isr

if isr_retener - op_isr_ajuste < 0:
   result = round(abs(isr_retener - op_isr_ajuste),2)
else:
   result = round(abs(subem_entregar),2)","limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
work =  0

if TPERG > 0:
      work = 1

if payslip.ultima_nomina and payslip.isr_ajustar and work > 0:
#########################################################
##################  #dias del periodo   ####################### 
#########################################################
   line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
   if line2:
      dias_periodo = line2.no_dias
   else:
      dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
   grabado_mensual = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
      line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

   if line:
      limite_inferior = line.lim_inf
      cuota_fija = line.c_fija
      porcentaje_sobre_excedente = line.s_excedente

   if line3:
      subsidio_empleo = line3.s_mensual

   #articulo 113
   excedente_limite_superior = grabado_mensual - limite_inferior
   impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
   isr_tarifa_113 = impuesto_marginal + cuota_fija

   op_isr_ajuste = 0
   op_ajuste_subem_causado = 0
   op_ajuste_subem = 0
   desc_dev_isr = 0
   desc_isr_ret_subem_entregado = 0
   desc_dev_subem = 0
   subem_entregar =  0
   factor01 = 0
   isr_retener = 0

   if isr_tarifa_113 > subsidio_empleo:
      isr_retener = isr_tarifa_113 - subsidio_empleo
      isr_retener = isr_retener - payslip.acum_isr
      if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
             desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
          else:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
          if subsidio_empleo == 0:
             if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
                op_isr_ajuste = payslip.acum_isr_antes_subem
             else:
                op_isr_ajuste = payslip.acum_subsidio_aplicado
             if payslip.acum_subsidio_aplicado > 0:
                op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
      else:
         result = 0
   else:
      if subsidio_empleo - isr_tarifa_113  < payslip.acum_isr:
          subem_entregar = payslip.acum_isr

   if isr_retener - op_isr_ajuste < 0 or subem_entregar > 0 or (subsidio_empleo > isr_tarifa_113 and payslip.acum_isr > 0):
     result = 1
   else:
     result = 0
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_309_b2a9c05e","Otros Pagos","O008","ISR por compensación anual",,"Sueldos ordinaria","430","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0","catalogo.otropago04",,,"0.0",,,,"
#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
limite_inferior2 = 0
cuota_fija2 = 0
porcentaje_sobre_excedente2 = 0
grabado_anual = 0
grabado_mensual = 0

isr_anual = 0
isr_acum_anual = 0
subsidio_x_aplicar = 0
##################subsidio mensual##############################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual

#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

if payslip.ultima_nomina and payslip.isr_ajustar:
   subsidio_x_aplicar = subsidio_empleo - payslip.acum_subsidio_aplicado
else:
   subsidio_x_aplicar = (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar

op_isr_ajuste = 0
isr_retener = 0

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          isr_retener = isr_retener - op_isr_ajuste
       else:
          isr_retener = isr_retener - payslip.acum_isr_antes_subem + payslip.acum_subsidio_aplicado
   else:
          if payslip.acum_subsidio_aplicado > subsidio_empleo:
             isr_retener = isr_retener - (payslip.acum_subsidio_aplicado - subsidio_empleo)
else:
   subsidio_pagado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
   total = isr_tarifa_113 
   total2 = subsidio_pagado

if inputs.ISR2:
   isr_mensual =  inputs.ISR2.amount
else:
   if payslip.ultima_nomina and payslip.isr_ajustar:
        if isr_retener < 0:
            isr_mensual =  0
        else:
            isr_mensual = round(isr_retener,2)
   else:
        if subsidio_pagado < 0:
            isr_mensual =  0
        else:
            if total2 < 0:
               isr_mensual = abs(round(total,2))
            else:
               isr_mensual = abs(round(total2,2))

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   if subsidio_empleo > 0:
      total = isr_tarifa_113 - abs(payslip.acum_isr_antes_subem)
   else:
      total = isr_tarifa_113 - abs(payslip.acum_isr)
else:
   total = isr_tarifa_113 

if total > isr_mensual:
   isr_mensual = total

######################### Calculo ISR anual #############################
grabado_anual = TPERG + payslip.acum_per_grav_anual

if contract.tablas_cfdi_id:
    line = contract.env['tablas.isr.anual'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_anual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
	   
#articulo 113
excedente_limite_superior = grabado_anual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

sub_apl_anual = payslip.acum_subsidio_aplicado_anual -  payslip.acum_dev_subem - payslip.acum_dev_subem_entregado
  
isr_ret_anual =  payslip.acum_isr_anual + payslip.acum_isr_ajuste - payslip.acum_dev_isr

isr_anual = round(isr_tarifa_113 - isr_ret_anual  - isr_mensual, 2)

if isr_anual < 0:
   result =  abs(isr_anual)
else:
   result =  0","if payslip.isr_anual and payslip.isr_ajustar:
   result = 1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_14","Otros Pagos","O001","Subsidio para el empleo (sp)",,"Sueldos ordinaria","435","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0","catalogo.otropago02",,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

subem_entregar = 0
factor01 = 0
dev_isr = 0
#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   if subsidio_empleo > isr_tarifa_113:
      if subsidio_empleo - isr_tarifa_113  < payslip.acum_isr or (subsidio_empleo > isr_tarifa_113 and payslip.acum_isr > 0):
          dev_isr = payslip.acum_isr
      subem_entregar = subsidio_empleo - isr_tarifa_113
      if not (payslip.acum_subsidio_aplicado <= 0 and subsidio_empleo > 0):
          factor01 = payslip.acum_isr_antes_subem + subem_entregar - payslip.acum_subsidio_aplicado - dev_isr
          if factor01 > 0:
              subem_entregar = factor01
          else:
               subem_entregar = 0            
else:
   subsidio_entregado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
   total = isr_tarifa_113 
   total2 = subsidio_entregado

if payslip.ultima_nomina and payslip.isr_ajustar:
   if subem_entregar > 0:
      result = round(subem_entregar,2)
   else:
      result = 0
else:
   if subsidio_empleo > 0:
      if subsidio_entregado < 0:
         result = round(abs(total2),2)
      else:
         result = 0
   else:
      result = 0

if inputs.O001:
   result = inputs.O001.amount","work = 0

if TPERG > 0:
   work = 1
if rules.O005:
   work = 0
if rules.O006:
   work = 0

result = work","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_35","Auxiliar","TOP","Total otros pagos",,"Sueldos ordinaria","499","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW3","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_547_992efdcb","Auxiliar","TOP","Total otros pagos",,"Comprobación viáticos","499","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW3","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_558_92450738","Auxiliar","TOP","Total otros pagos",,"Entrega Viaticos","499","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW3","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_564_92d2d897","Auxiliar","TOP","Total otros pagos",,"Liquidación - indemnizacion/finiquito","499","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW3","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_570_2a667b0a","Auxiliar","TOP","Total otros pagos",,"Reparto de utilidades","499","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW3","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_581_8b72a45b","Auxiliar","TOP","Total otros pagos",,"Aguinaldo","499","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW3","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_590_a8c4d751","Auxiliar","TOP","Total otros pagos",,"Asimilado","499","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.ALW3","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_21","Auxiliar","SUB","Subsidio al Empleo aplicado",,"Sueldos ordinaria","500","Expresión Python","10.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   if subsidio_empleo > 0:
      subsidio_pagado = isr_tarifa_113 - abs(payslip.acum_isr_antes_subem) - subsidio_empleo
      total =  isr_tarifa_113 - abs(payslip.acum_isr_antes_subem)
   else:
      subsidio_pagado = isr_tarifa_113 - abs(payslip.acum_isr) - subsidio_empleo
      total = isr_tarifa_113 - abs(payslip.acum_isr)
   total2 = subsidio_pagado - payslip.acum_subsidio_aplicado
else:
   subsidio_pagado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
   total = isr_tarifa_113 
   total2 = subsidio_pagado

smm = 0
if payslip.ultima_nomina and payslip.isr_ajustar:
   line = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)], limit=1)
   smm = contract.tablas_cfdi_id.salario_minimo * line.no_dias
else:
   smm = contract.tablas_cfdi_id.salario_minimo * payslip.dias_pagar

if grabado_mensual <= smm:
   result = 0
else:
   if payslip.ultima_nomina and payslip.isr_ajustar:
      if payslip.acum_subsidio_aplicado > subsidio_empleo:
         result = 0
      else:
         result = round(subsidio_empleo - payslip.acum_subsidio_aplicado,2)
   else:
      result = round((subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar,2)

if inputs.SUB:
   result = inputs.SUB.amount","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
grabado_mensual = 0

work = 0
if TPER > 0:
      work = 1

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual

if subsidio_empleo <= 0:
    result = 0
else:
   if work:
      result =  1
   else:
      result = 0

if inputs.SUB:
   result = 1","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_78_6de34d75","Auxiliar","ISR","ISR antes de SUBEM",,"Sueldos ordinaria","502","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   subsidio_pagado = isr_tarifa_113 - subsidio_empleo
   if subsidio_empleo > 0:
      total = isr_tarifa_113 - abs(payslip.acum_isr_antes_subem)
   else:
      total = isr_tarifa_113 - abs(payslip.acum_isr)
   total2 =  subsidio_pagado
else:
   subsidio_pagado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
   total = isr_tarifa_113 
   total2 = subsidio_pagado

if total < 0:
   result = 0
else:
   smm = 0
   if payslip.ultima_nomina and payslip.isr_ajustar:
      line = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)], limit=1)
      smm = contract.tablas_cfdi_id.salario_minimo * line.no_dias
   else:
      smm = contract.tablas_cfdi_id.salario_minimo * payslip.dias_pagar

   if grabado_mensual <= smm:
      result = 0
   else:
      result = round(total,2)

if inputs.ISR:
   result = inputs.ISR.amount","#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
grabado_mensual = 0

work = 0
if TPER > 0:
      work = 1

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

#subsidio mensual
subsidio_pagado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
total = isr_tarifa_113 
total2 = subsidio_pagado

if subsidio_empleo <= 0:
   result = 0
else:
   if work:
      result =  1
   else:
      result = 0

if inputs.ISR:
   result = 1","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_127_4c5d7e10","Deducciones","ISR","ISR asimilados",,"Sueldos ordinaria","504","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0

ingreso_normal_mensual =  contract.sueldo_diario*payslip.imss_mes + categories.ALW/worked_days.WORK100.number_of_days * payslip.imss_mes

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',ingreso_normal_mensual)],order='lim_inf desc',limit=1)
    if line:
       inm_lim_inf = line.lim_inf
       inm_c_fija= line.c_fija
       inm_p_s_exedente = line.s_excedente
	   
#articulo 113
excedente_limite_superior = ingreso_normal_mensual - inm_lim_inf
impuesto_marginal = excedente_limite_superior * inm_p_s_exedente/100
isr_tarifa_113 = impuesto_marginal + inm_c_fija

result = round((isr_tarifa_113 / payslip.imss_mes) * worked_days.WORK100.number_of_days, 2)","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto","catalogos.deduccion02",,"Código Python"
"__export__.hr_salary_rule_130_726c5cb3","Deducciones","ISR2","ISR aguinaldo",,"Aguinaldo","504","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
monto_percepciones = 0

monto_percepciones =  TPERG

fraccion1 = monto_percepciones / 365 * contract.tablas_cfdi_id.imss_mes

grabado_mensual = fraccion1 + contract.sueldo_diario * contract.tablas_cfdi_id.imss_mes

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
fraccion2 = impuesto_marginal + cuota_fija

grabado_mensual2 = contract.sueldo_diario * contract.tablas_cfdi_id.imss_mes

if contract.tablas_cfdi_id:
    line3 = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line3:
       limite_inferior2 = line3.lim_inf
       cuota_fija2 = line3.c_fija
       porcentaje_sobre_excedente2 = line3.s_excedente
    line4 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line4:
       subsidio_empleo2 = line4.s_mensual
	   
#articulo 113
excedente_limite_superior2 = grabado_mensual2 - limite_inferior2
impuesto_marginal2 = excedente_limite_superior2 * porcentaje_sobre_excedente2/100
isr_tarifa_113_2 = impuesto_marginal2 + cuota_fija2

fraccion3 = fraccion2 - isr_tarifa_113_2

if fraccion1 > 0:
   fraccion5 = fraccion3 / fraccion1
   result = round(fraccion5 * monto_percepciones, 2)
else:
   result = 0","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto","catalogos.deduccion02",,"Código Python"
"__export__.hr_salary_rule_220_f4cb664e","Deducciones","ISR2","ISR Art. 95 LISR",,"Liquidación - indemnizacion/finiquito","504","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0

grabado_mensual = contract.sueldo_diario * 30

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

tasa_isr = isr_tarifa_113 / grabado_mensual

result = round(TPERG * tasa_isr, 2)","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto","catalogos.deduccion02",,"Código Python"
"__export__.hr_salary_rule_85_c6da0ae1","Deducciones","ISR2","ISR (sp)",,"Sueldos ordinaria","505","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual

#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
isr_retener = 0

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          isr_retener = isr_retener - op_isr_ajuste
       else:
          isr_retener = isr_retener - payslip.acum_isr_antes_subem + payslip.acum_subsidio_aplicado
   else:
          if payslip.acum_subsidio_aplicado > subsidio_empleo:
             isr_retener = isr_retener - (payslip.acum_subsidio_aplicado - subsidio_empleo)
else:
   subsidio_pagado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
   total = isr_tarifa_113 
   total2 = subsidio_pagado

if inputs.ISR2:
   result =  inputs.ISR2.amount
else:
   smm = 0
   if payslip.ultima_nomina and payslip.isr_ajustar:
      line = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)], limit=1)
      smm = contract.tablas_cfdi_id.salario_minimo * line.no_dias
   else:
      smm = contract.tablas_cfdi_id.salario_minimo * payslip.dias_pagar

   if grabado_mensual <= smm:
      result = 0
   else:
      if payslip.ultima_nomina and payslip.isr_ajustar:
           if isr_retener < 0:
               result =  0
           else:
               result = round(isr_retener,2)
      else:
           if subsidio_pagado < 0:
               result =  0
           else:
               if total2 < 0:
                  result = abs(round(total,2))
               else:
                  result = abs(round(total2,2))","result = 1
   ","Todo el monto","catalogos.deduccion02",,"Código Python"
"__export__.hr_salary_rule_153_6ad95f1b","Deducciones","ISR2","ISR (sp) PTU",,"Reparto de utilidades","505","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
monto_percepciones = TPERG/365*contract.tablas_cfdi_id.imss_mes

grabado_mensual = monto_percepciones + contract.sueldo_diario * contract.tablas_cfdi_id.imss_mes

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

grabado_mensual2 = contract.sueldo_diario * contract.tablas_cfdi_id.imss_mes

if contract.tablas_cfdi_id:
    line3 = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line3:
       limite_inferior2 = line3.lim_inf
       cuota_fija2 = line3.c_fija
       porcentaje_sobre_excedente2 = line3.s_excedente
    line4 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line4:
       subsidio_empleo2 = line4.s_mensual
	   
#articulo 113
excedente_limite_superior2 = grabado_mensual2 - limite_inferior2
impuesto_marginal2 = excedente_limite_superior2 * porcentaje_sobre_excedente2/100
isr_tarifa_113_2 = impuesto_marginal2 + cuota_fija2


isr_mensual = isr_tarifa_113 - isr_tarifa_113_2

if TPERG > 0 :
   result = round(TPERG * isr_mensual / monto_percepciones, 2)
else:
   result = 0","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto","catalogos.deduccion02",,"Código Python"
"__export__.hr_salary_rule_310_92c8a236","Deducciones","ISR2","ISR mensual",,"Asimilado","505","Siempre verdadero","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
dias_periodo_mes = 0
dias_periodo = 0

if contract.periodicidad_pago == '02' and payslip.isr_ajustar:
   dias_periodo_mes = payslip.dias_periodo
   dias_periodo = 7 * float(payslip.no_nomina)
else:
   dias_periodo_mes = contract.tablas_cfdi_id.imss_mes
   dias_periodo = payslip.dias_pagar

#grabado_mensual
grabado_mensual = TPERG 

if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
    line2 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    if line2:
       subsidio_empleo = line2.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

total = round(isr_tarifa_113, 2)

result = abs(total)","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto","catalogos.deduccion02",,"Código Python"
"__export__.hr_salary_rule_421_960e7e35","Deducciones","D060","ISR (sp) ajuste",,"Sueldos ordinaria","506","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
grabado_mensual = TPERG + payslip.acum_per_grav
if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
    limite_inferior = line.lim_inf
    cuota_fija = line.c_fija
    porcentaje_sobre_excedente = line.s_excedente

if line3:
    subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
op_ajuste_subem_causado = 0
op_ajuste_subem = 0
desc_dev_isr = 0
desc_isr_ret_subem_entregado = 0
desc_dev_subem = 0
subem_entregar =  0
factor01 = 0
isr_retener = 0

if isr_tarifa_113 > subsidio_empleo:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
          desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
          desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
       else:
          desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          if payslip.acum_subsidio_aplicado > 0:
             op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
   elif payslip.acum_subsidio_aplicado > 0 and subsidio_empleo > 0:
          if payslip.acum_subsidio_aplicado > subsidio_empleo:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado - subsidio_empleo
             op_isr_ajuste = payslip.acum_subsidio_aplicado - subsidio_empleo
             op_ajuste_subem_causado = payslip.acum_subsidio_aplicado - subsidio_empleo
          else:
             result = 0
   else:
      result = 0
else:
   subem_entregar = subsidio_empleo - isr_tarifa_113
   if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
      factor01 = payslip.acum_isr_antes_subem
   else:
      factor01 = payslip.acum_subsidio_aplicado
   subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

result = round(op_isr_ajuste, 2)","limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
work =  0

if TPERG > 0:
      work = 1

if payslip.ultima_nomina and payslip.isr_ajustar and work > 0:
#########################################################
##################  #dias del periodo   ####################### 
#########################################################
   line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
   if line2:
      dias_periodo = line2.no_dias
   else:
      dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
   grabado_mensual = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
      line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

   if line:
      limite_inferior = line.lim_inf
      cuota_fija = line.c_fija
      porcentaje_sobre_excedente = line.s_excedente

   if line3:
      subsidio_empleo = line3.s_mensual

   #articulo 113
   excedente_limite_superior = grabado_mensual - limite_inferior
   impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
   isr_tarifa_113 = impuesto_marginal + cuota_fija

   op_isr_ajuste = 0
   op_ajuste_subem_causado = 0
   op_ajuste_subem = 0
   desc_dev_isr = 0
   desc_isr_ret_subem_entregado = 0
   desc_dev_subem = 0
   subem_entregar =  0
   factor01 = 0
   isr_retener = 0

   if isr_tarifa_113 > subsidio_empleo:
      isr_retener = isr_tarifa_113 - subsidio_empleo
      isr_retener = isr_retener - payslip.acum_isr
      if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
             desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
          else:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
          if subsidio_empleo == 0:
             if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
                op_isr_ajuste = payslip.acum_isr_antes_subem
             else:
                op_isr_ajuste = payslip.acum_subsidio_aplicado
             if payslip.acum_subsidio_aplicado > 0:
                op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
      elif payslip.acum_subsidio_aplicado > 0 and subsidio_empleo > 0:
             if payslip.acum_subsidio_aplicado > subsidio_empleo:
                desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado - subsidio_empleo
                op_isr_ajuste = payslip.acum_subsidio_aplicado - subsidio_empleo
                op_ajuste_subem_causado = payslip.acum_subsidio_aplicado - subsidio_empleo
             else:
                result = 0
      else:
         result = 0
   else:
      subem_entregar = subsidio_empleo - isr_tarifa_113
      if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
         factor01 = payslip.acum_isr_antes_subem
      else:
         factor01 = payslip.acum_subsidio_aplicado
      subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

   if op_isr_ajuste > 0:
     result = 1
   else:
     result = 0
else:
   result = 0","Todo el monto","catalogos.deduccion02",,"Código Python"
"__export__.hr_salary_rule_425_069d5dfa","Deducciones","D061","Ajuste en Subsidio para el empleo (efectivamente entregado al trabajador)",,"Sueldos ordinaria","507","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
grabado_mensual = TPERG + payslip.acum_per_grav
if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
    limite_inferior = line.lim_inf
    cuota_fija = line.c_fija
    porcentaje_sobre_excedente = line.s_excedente

if line3:
    subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_ajuste_subem = 0
subem_entregar =  0
factor01 = 0

if isr_tarifa_113 > subsidio_empleo:
   if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
      op_ajuste_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
else:
   subem_entregar = subsidio_empleo - isr_tarifa_113
   if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
      factor01 = payslip.acum_isr_antes_subem
   else:
      factor01 = payslip.acum_subsidio_aplicado
   subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

if op_ajuste_subem > 0:
   result = round(op_ajuste_subem, 2)
else:
   result = round(subem_entregar, 2)","limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
work =  0

if TPERG > 0:
      work = 1

if payslip.ultima_nomina and payslip.isr_ajustar and work > 0:
#########################################################
##################  #dias del periodo   ####################### 
#########################################################
   line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
   if line2:
      dias_periodo = line2.no_dias
   else:
      dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
   grabado_mensual = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
      line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

   if line:
      limite_inferior = line.lim_inf
      cuota_fija = line.c_fija
      porcentaje_sobre_excedente = line.s_excedente

   if line3:
      subsidio_empleo = line3.s_mensual

   #articulo 113
   excedente_limite_superior = grabado_mensual - limite_inferior
   impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
   isr_tarifa_113 = impuesto_marginal + cuota_fija

   op_isr_ajuste = 0
   op_ajuste_subem_causado = 0
   op_ajuste_subem = 0
   desc_dev_isr = 0
   desc_isr_ret_subem_entregado = 0
   desc_dev_subem = 0
   subem_entregar =  0
   factor01 = 0
   isr_retener = 0

   if isr_tarifa_113 > subsidio_empleo:
      isr_retener = isr_tarifa_113 - subsidio_empleo
      isr_retener = isr_retener - payslip.acum_isr
      if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
          op_ajuste_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
   else:
      subem_entregar = subsidio_empleo - isr_tarifa_113
      if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
         factor01 = payslip.acum_isr_antes_subem
      else:
         factor01 = payslip.acum_subsidio_aplicado
      subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

   if op_ajuste_subem > 0 or subem_entregar > 0: 
     result = 1
   else:
     result = 0
else:
   result = 0","Todo el monto","catalogos.deduccion71",,"Código Python"
"__export__.hr_salary_rule_423_5d072534","Deducciones","D062","Ajuste subsidio causado",,"Sueldos ordinaria","508","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0

#########################################################
##################  #dias del periodo   ####################### 
#########################################################
line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
if line2:
   dias_periodo = line2.no_dias
else:
   dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
grabado_mensual = TPERG + payslip.acum_per_grav
if contract.tablas_cfdi_id:
    line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
    line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
    limite_inferior = line.lim_inf
    cuota_fija = line.c_fija
    porcentaje_sobre_excedente = line.s_excedente

if line3:
    subsidio_empleo = line3.s_mensual
	   
#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
op_ajuste_subem_causado = 0
op_ajuste_subem = 0
desc_dev_isr = 0
desc_isr_ret_subem_entregado = 0
desc_dev_subem = 0
subem_entregar =  0
factor01 = 0
isr_retener = 0

if isr_tarifa_113 > subsidio_empleo:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
          desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
          desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
       else:
          desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          if payslip.acum_subsidio_aplicado > 0:
             op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
   elif payslip.acum_subsidio_aplicado > 0 and subsidio_empleo > 0:
          if payslip.acum_subsidio_aplicado > subsidio_empleo:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado - subsidio_empleo
             op_isr_ajuste = payslip.acum_subsidio_aplicado - subsidio_empleo
             op_ajuste_subem_causado = payslip.acum_subsidio_aplicado - subsidio_empleo
          else:
             result = 0
   else:
      result = 0
else:
   subem_entregar = subsidio_empleo - isr_tarifa_113
   if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
      factor01 = payslip.acum_isr_antes_subem
   else:
      factor01 = payslip.acum_subsidio_aplicado
   subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

result = round(op_ajuste_subem_causado, 2)","limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
grabado_mensual = 0
work =  0

if TPERG > 0:
      work = 1

if payslip.ultima_nomina and payslip.isr_ajustar and work > 0:
#########################################################
##################  #dias del periodo   ####################### 
#########################################################
   line2 = contract.env['tablas.periodo.mensual'].search([('form_id','=',contract.tablas_cfdi_id.id),('mes','=',payslip.mes)],limit=1)
   if line2:
      dias_periodo = line2.no_dias
   else:
      dias_periodo = 0

#########################################################
##################  #grabado_mensual   #####################  
#########################################################
   grabado_mensual = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
      line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

   if line:
      limite_inferior = line.lim_inf
      cuota_fija = line.c_fija
      porcentaje_sobre_excedente = line.s_excedente

   if line3:
      subsidio_empleo = line3.s_mensual

   #articulo 113
   excedente_limite_superior = grabado_mensual - limite_inferior
   impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
   isr_tarifa_113 = impuesto_marginal + cuota_fija

   op_isr_ajuste = 0
   op_ajuste_subem_causado = 0
   op_ajuste_subem = 0
   desc_dev_isr = 0
   desc_isr_ret_subem_entregado = 0
   desc_dev_subem = 0
   subem_entregar =  0
   factor01 = 0
   isr_retener = 0

   if isr_tarifa_113 > subsidio_empleo:
      isr_retener = isr_tarifa_113 - subsidio_empleo
      isr_retener = isr_retener - payslip.acum_isr
      if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             desc_isr_ret_subem_entregado = payslip.acum_isr_antes_subem
             desc_dev_subem = payslip.acum_subsidio_aplicado - payslip.acum_isr_antes_subem
          else:
             desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado
          if subsidio_empleo == 0:
             if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
                op_isr_ajuste = payslip.acum_isr_antes_subem
             else:
                op_isr_ajuste = payslip.acum_subsidio_aplicado
             if payslip.acum_subsidio_aplicado > 0:
                op_ajuste_subem_causado =  payslip.acum_subsidio_aplicado
      elif payslip.acum_subsidio_aplicado > 0 and subsidio_empleo > 0:
             if payslip.acum_subsidio_aplicado > subsidio_empleo:
                desc_isr_ret_subem_entregado = payslip.acum_subsidio_aplicado - subsidio_empleo
                op_isr_ajuste = payslip.acum_subsidio_aplicado - subsidio_empleo
                op_ajuste_subem_causado = payslip.acum_subsidio_aplicado - subsidio_empleo
             else:
                result = 0
      else:
         result = 0
   else:
      subem_entregar = subsidio_empleo - isr_tarifa_113
      if payslip.acum_isr_antes_subem > payslip.acum_subsidio_aplicado:
         factor01 = payslip.acum_isr_antes_subem
      else:
         factor01 = payslip.acum_subsidio_aplicado
      subem_entregar = factor01 - payslip.acum_isr_antes_subem - subem_entregar

   if op_ajuste_subem_causado > 0:
     result = 1
   else:
     result = 0
else:
   result = 0","Todo el monto","catalogos.deduccion107",,"Código Python"
"__export__.hr_salary_rule_22","Deducciones","D002","IMSS",,"Sueldos ordinaria","510","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"dias_laborados = 0
dias_completos = 0
dias_trabajo = 0

dias_completos = payslip.imss_dias
dias_laborados =  dias_completos

if worked_days.WORK100:
   dias_trabajo = dias_trabajo + worked_days.WORK100.number_of_days
if worked_days.SEPT:
   dias_trabajo = dias_trabajo + worked_days.SEPT.number_of_days
if worked_days.FJC:
   dias_trabajo = dias_trabajo + worked_days.FJC.number_of_days

if dias_trabajo > 0.01:
   if worked_days.FI:
      dias_laborados = dias_laborados - worked_days.FI.number_of_days
   if worked_days.FJS:
      dias_laborados = dias_laborados - worked_days.FJS.number_of_days
   if worked_days.FR:
      dias_laborados = dias_laborados - worked_days.FR.number_of_days
   if worked_days.INC_MAT:
      dias_laborados = dias_laborados - worked_days.INC_MAT.number_of_days
      dias_completos = dias_completos - worked_days.INC_MAT.number_of_days
   if worked_days.INC_EG:
      dias_laborados = dias_laborados - worked_days.INC_EG.number_of_days
      dias_completos = dias_completos - worked_days.INC_EG.number_of_days
   if worked_days.INC_RT:
      dias_laborados = dias_laborados - worked_days.INC_RT.number_of_days
      dias_completos = dias_completos - worked_days.INC_RT.number_of_days
else:
   dias_laborados = 0
   dias_completos = 0

dias_periodo = 0
line = contract.env['tablas.periodo.bimestral'].search([('form_id','=',contract.tablas_cfdi_id.id),('dia_fin','>=',payslip.date_to),('dia_inicio','<=',payslip.date_to)],limit=1)
if line:
   dias_periodo = line.no_dias/8

#cuota del IMSS parte del Empleado
if contract.sueldo_base_cotizacion < 25 * contract.tablas_cfdi_id.uma:
   salario_cotizado = contract.sueldo_base_cotizacion
else:
   salario_cotizado = 25 * contract.tablas_cfdi_id.uma

uma3 =  contract.tablas_cfdi_id.uma * 3

prestaciones = salario_cotizado * contract.tablas_cfdi_id.enf_mat_prestaciones_e/100 * dias_completos
invalli_y_vida = salario_cotizado * contract.tablas_cfdi_id.inv_vida_e/100 * dias_laborados
cesantia_y_vejez = salario_cotizado * contract.tablas_cfdi_id.cesantia_vejez_e/100 * dias_laborados
pensio_y_benefi = salario_cotizado * contract.tablas_cfdi_id.enf_mat_gastos_med_e/100 *dias_completos

#seguro_enfermedad_maternidad
excedente = salario_cotizado - uma3
base_cotizacion = excedente * contract.tablas_cfdi_id.enf_mat_excedente_e/100
seg_enf_mat = base_cotizacion * dias_completos

if contract.sueldo_base_cotizacion < uma3:
  prestaciones = prestaciones + pensio_y_benefi
else:
  prestaciones = prestaciones + pensio_y_benefi + abs(seg_enf_mat)

if inputs.IMSS:
   result = inputs.IMSS.amount
else:
   result = round(invalli_y_vida + prestaciones + cesantia_y_vejez, 2)","if contract.sueldo_diario <= contract.tablas_cfdi_id.salario_minimo:
   result = 0
else:
   result = 1","Todo el monto","catalogos.deduccion01",,"Código Python"
"__export__.hr_salary_rule_389_b40ffe2c","Deducciones","D003","Cuota caja de ahorro",,"Sueldos ordinaria","515","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.D003:
   result = inputs.D003.amount
else:
   result =0","if inputs.D003:
   result =  1
else:
   result = 0","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_396_d9c8ba87","Deducciones","D004","Descuento préstamo caja",,"Sueldos ordinaria","520","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.D004:
   result = inputs.D004.amount
else:
   result =0","if inputs.D004:
   result =  1
else:
   result = 0","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_397_d8ea0ab4","Deducciones","D005","Interés préstamo caja",,"Sueldos ordinaria","525","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.D005:
   result = inputs.D005.amount
else:
   result =0","if inputs.D005:
   result =  1
else:
   result = 0","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_398_d8de0103","Deducciones","D007","Descuento préstamo personal",,"Sueldos ordinaria","530","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.D007:
   result = inputs.D007.amount
else:
   result =0","if inputs.D007:
   result =  1
else:
   result = 0","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_399_83c49c88","Deducciones","D008","Pago reposición credencial",,"Sueldos ordinaria","535","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.D008:
   result = inputs.D008.amount
else:
   result =0","if inputs.D008:
   result =  1
else:
   result = 0","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_74_bb15e36b","Deducciones","D010","Pensión alimenticia",,"Sueldos ordinaria","540","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if rules.P030:
   result =  round((P001 + P030 - ISR2 - D052 - D053) * contract.pens_alim/100, 2)
else:
   result =  round((P001 - ISR2 - D052 - D053) * contract.pens_alim/100, 2)","if contract.pens_alim > 0:
   result =1>0
else:
   result = 0>1","Todo el monto","catalogos.deduccion07",,"Código Python"
"__export__.hr_salary_rule_566_a065e791","Deducciones","D010","Pensión alimenticia",,"Reparto de utilidades","540","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if rules.P030:
   result =  round((P001 + P030 - ISR2 - D052 - D053) * contract.pens_alim/100, 2)
else:
   result =  round((P001 - ISR2 - D052 - D053) * contract.pens_alim/100, 2)","if contract.pens_alim > 0:
   result =1>0
else:
   result = 0>1","Todo el monto","catalogos.deduccion07",,"Código Python"
"__export__.hr_salary_rule_583_9967bf64","Deducciones","D010","Pensión alimenticia",,"Aguinaldo","540","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if rules.P030:
   result =  round((P001 + P030 - ISR2 - D052 - D053) * contract.pens_alim/100, 2)
else:
   result =  round((P001 - ISR2 - D052 - D053) * contract.pens_alim/100, 2)","if contract.pens_alim > 0:
   result =1>0
else:
   result = 0>1","Todo el monto","catalogos.deduccion07",,"Código Python"
"__export__.hr_salary_rule_172_ec7b98be","Deducciones","D011","Descuento faltante material",,"Sueldos ordinaria","545","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.D011:
   result = inputs.D011.amount
else:
   result =0","if inputs.D011:
   result =  1>0
else:
   result = 0>1","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_400_ff01dab2","Deducciones","D014","Deudores diversos",,"Sueldos ordinaria","550","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.D014:
   result = inputs.D014.amount
else:
   result =0","if inputs.D014:
   result =  1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_401_5acfc45a","Deducciones","D019","Ajuste FONACOT",,"Sueldos ordinaria","555","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.D019:
   result = inputs.D019.amount
else:
   result =0","if inputs.D019:
   result =  1
else:
   result = 0","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_402_f197ad64","Deducciones","D021","Descuento faltante efectivo",,"Sueldos ordinaria","560","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.D021:
   result = inputs.D021.amount
else:
   result =0","if inputs.D021:
   if inputs.D021.amount > 0:
      result = 1
   else:
      result = 0","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_88_269aea74","Deducciones","D032","Descuento otros",,"Sueldos ordinaria","565","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.D032:
   result = inputs.D032.amount
else:
   result =0","if inputs.D032:
   if inputs.D032.amount > 0:
      result = 1
   else:
      result = 0","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_403_1aa8c1b7","Deducciones","D040","Viaticos",,"Sueldos ordinaria","570","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.D040:
   result = inputs.D040.amount
else:
   result =0","if inputs.D040:
   if inputs.D040.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_404_058d885f","Deducciones","D092","Amortización INFONAVIT",,"Sueldos ordinaria","575","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.D092:
   result = inputs.D092.amount
else:
   result =0","if inputs.D092:
   if inputs.D092.amount > 0:
      result = 1 > 0
   else:
      result = 0 > 1","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_72_d2570f37","Deducciones","D093","Crédito FONACOT",,"Sueldos ordinaria","580","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
if inputs.D093:
   total = inputs.D093.amount
if contract.prestamo_fonacot > 0:
   total = contract.prestamo_fonacot

result = round(total, 2)","if inputs.D093 or contract.prestamo_fonacot > 0:
   result =  1
else:
   result = 0","Todo el monto","catalogos.deduccion11",,"Código Python"
"__export__.hr_salary_rule_23","Deducciones","D094","Crédito Infonavit (cuota fija)",,"Sueldos ordinaria","585","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"dias_periodo = 0
line = contract.env['tablas.periodo.bimestral'].search([('form_id','=',contract.tablas_cfdi_id.id),('dia_fin','>=',payslip.date_to),('dia_inicio','<=',payslip.date_to)],limit=1)

if line:
   dias_periodo = line.no_dias

dias_laborados = 0

if worked_days.WORK100:
   dias_laborados = worked_days.WORK100.number_of_days
if worked_days.FJC:
   dias_laborados = dias_laborados + worked_days.FJC.number_of_days
if worked_days.VAC:
   dias_laborados = dias_laborados + worked_days.VAC.number_of_days
if worked_days.SEPT:
   dias_laborados = dias_laborados + worked_days.SEPT.number_of_days

if inputs.INFONAVIT:
   result =  inputs.INFONAVIT.amount
else:
   result = round(((contract.infonavit_fijo + 15) / 2) / 30.4 * dias_laborados, 2)


#   result = int(round((contract.infonavit_fijo * 2 + 15) / dias_periodo * payslip.dias_pagar))","if contract.infonavit_fijo > 0 or inputs.INFONAVIT:
   if TPER == 0:
      result = 0
   else:
      result = 1
else:
   result = 0","Todo el monto","catalogos.deduccion10",,"Código Python"
"__export__.hr_salary_rule_24","Deducciones","D094","Crédito Infonavit (SBC)",,"Sueldos ordinaria","585","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"dias_ausentismo = 0
if worked_days.FJS:
   dias_ausentismo= dias_ausentismo + worked_days.FJS.number_of_days
if worked_days.FR:
   dias_ausentismo= dias_ausentismo + worked_days.FR.number_of_days
#if worked_days.FI:
#   dias_ausentismo= dias_ausentismo + worked_days.FI.number_of_days

dias_incapacidad = 0
if worked_days.INC_MAT:
   dias_incapacidad = dias_incapacidad + worked_days.INC_MAT.number_of_days
if worked_days.INC_EG:
   dias_incapacidad = dias_incapacidad + worked_days.INC_EG.number_of_days
#if worked_days.INC_RT:
 #  dias_incapacidad = dias_incapacidad + worked_days.INC_RT.number_of_days

#result = ((contract.sueldo_base_cotizacion * contract.infonavit_porc/100 * dias_periodo) + 15 ) / dias_periodo * dias_laborados

#result = ((contract.sueldo_base_cotizacion * contract.infonavit_porc/100  + 15 ) / 2 ) / 30.4 * dias_laborados

result = round(((contract.sueldo_base_cotizacion * (payslip.imss_dias - dias_ausentismo - dias_incapacidad)) * (contract.infonavit_porc / 100)) + 15 , 2)

if P001 <= 0:
   result = 0","if contract.infonavit_porc > 0:
   if TPER == 0:
      result = 0
   else:
      result = 1
else:
   result = 0","Todo el monto","catalogos.deduccion10",,"Código Python"
"__export__.hr_salary_rule_26","Deducciones","D094","Crédito Infonavit (VSM)",,"Sueldos ordinaria","585","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"dias_periodo = 0
dias_mes = 0
line = contract.env['tablas.periodo.bimestral'].search([('form_id','=',contract.tablas_cfdi_id.id),('dia_fin','>=',payslip.date_to),('dia_inicio','<=',payslip.date_to)],limit=1)
if line:
   dias_periodo = line.no_dias

mes_actual = contract.env['tablas.periodo.mensual'].search([('mes', '=', payslip.mes)],limit=1)
if mes_actual:
   dias_mes = mes_actual.no_dias

dias_laborados = 0
if worked_days.WORK100:
   dias_laborados = worked_days.WORK100.number_of_days
if worked_days.FJC:
   dias_laborados = dias_laborados + worked_days.FJC.number_of_days
if worked_days.VAC:
   dias_laborados = dias_laborados + worked_days.VAC.number_of_days
if worked_days.SEPT:
   dias_laborados = dias_laborados + worked_days.SEPT.number_of_days

result = round(((contract.infonavit_vsm * contract.tablas_cfdi_id.umi + 15) / 2 ) / 30.4 * dias_laborados, 2)","if contract.infonavit_vsm > 0:
   if TPER == 0:
      result = 0
   else:
      result = 1
else:
   result = 0 ","Todo el monto","catalogos.deduccion10",,"Código Python"
"__export__.hr_salary_rule_69_7aa6213e","Deducciones","D091","Seguro de vivienda infonavit",,"Sueldos ordinaria","586","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if contract.infonavit_fijo > 0 or contract.infonavit_vsm > 0 or contract.infonavit_porc > 0:
  result = 15
else:
  result = 0","if contract.infonavit_fijo > 0 or contract.infonavit_vsm > 0 or contract.infonavit_porc > 0:
   result = 1
else:
   result = 0","Todo el monto","catalogos.deduccion10",,"Código Python"
"__export__.hr_salary_rule_405_dad9020a","Deducciones","D095","Ajuste INFONAVIT bim. anterior",,"Sueldos ordinaria","590","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.D096.amount","if inputs.D095:
   result = 1
else:
   result = 0","Todo el monto","catalogos.deduccion05",,"Código Python"
"__export__.hr_salary_rule_406_d33b72ba","Deducciones","D096","Adeudo INFONAVIT",,"Sueldos ordinaria","595","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = inputs.D096.amount","if inputs.D096:
   result = 1
else:
   result = 0","Todo el monto","catalogos.deduccion05",,"Código Python"
"__export__.hr_salary_rule_306_96dfc4a4","Deducciones","D204","ISR retenido de ejercicio anterior",,"Sueldos ordinaria","618","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0","catalogo.otropago05",,,"0.0",,,,"if inputs.D204:
   result = inputs.D204.amount
else:
   result =0","if inputs.D204:
   result = inputs.D204.amount
else:
   result =0","Todo el monto","catalogos.deduccion101",,"Código Python"
"__export__.hr_salary_rule_1086_0bbe0f70","Deducciones","D020","ISR ajuste anual",,"Sueldos ordinaria","620","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"
#leer tablas
limite_inferior = 0
cuota_fija = 0
porcentaje_sobre_excedente = 0
subsidio_empleo = 0
dias_laborados = 0
limite_inferior2 = 0
cuota_fija2 = 0
porcentaje_sobre_excedente2 = 0
grabado_anual = 0
grabado_mensual = 0

isr_anual = 0
isr_acum_anual = 0
##################subsidio mensual##############################
if payslip.ultima_nomina and payslip.isr_ajustar:
   grabado_mensual = TPERG + payslip.acum_per_grav
   grabado_sub = TPERG + payslip.acum_per_grav
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.general.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)
else:
   grabado_mensual = TPERG
   grabado_sub = TPERG / payslip.dias_pagar * contract.tablas_cfdi_id.imss_mes
   if contract.tablas_cfdi_id:
      line = contract.env['tablas.isr.periodo'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_mensual)],order='lim_inf desc',limit=1)

if line:
   limite_inferior = line.lim_inf
   cuota_fija = line.c_fija
   porcentaje_sobre_excedente = line.s_excedente
line3 = contract.env['tablas.subsidio.line'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_sub)],order='lim_inf desc',limit=1)
if line3:
   subsidio_empleo = line3.s_mensual

#articulo 113
excedente_limite_superior = grabado_mensual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

op_isr_ajuste = 0
isr_retener = 0

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   isr_retener = isr_tarifa_113 - subsidio_empleo
   isr_retener = isr_retener - payslip.acum_isr
   if payslip.acum_subsidio_aplicado > 0 and subsidio_empleo == 0:
       if subsidio_empleo == 0:
          if payslip.acum_subsidio_aplicado > payslip.acum_isr_antes_subem:
             op_isr_ajuste = payslip.acum_isr_antes_subem
          else:
             op_isr_ajuste = payslip.acum_subsidio_aplicado
          isr_retener = isr_retener - op_isr_ajuste
       else:
          isr_retener = isr_retener - payslip.acum_isr_antes_subem + payslip.acum_subsidio_aplicado
   else:
          if payslip.acum_subsidio_aplicado > subsidio_empleo:
             isr_retener = isr_retener - (payslip.acum_subsidio_aplicado - subsidio_empleo)
else:
   subsidio_pagado = isr_tarifa_113 - (subsidio_empleo / contract.tablas_cfdi_id.imss_mes) * payslip.dias_pagar
   total = isr_tarifa_113 
   total2 = subsidio_pagado

if inputs.ISR2:
   isr_mensual =  inputs.ISR2.amount
else:
   if payslip.ultima_nomina and payslip.isr_ajustar:
        if isr_retener < 0:
            isr_mensual =  0
        else:
            isr_mensual = round(isr_retener,2)
   else:
        if subsidio_pagado < 0:
            isr_mensual =  0
        else:
            if total2 < 0:
               isr_mensual = abs(round(total,2))
            else:
               isr_mensual = abs(round(total2,2))

#subsidio mensual
if payslip.ultima_nomina and payslip.isr_ajustar:
   if subsidio_empleo > 0:
      total = isr_tarifa_113 - abs(payslip.acum_isr_antes_subem)
   else:
      total = isr_tarifa_113 - abs(payslip.acum_isr)
else:
   total = isr_tarifa_113 

if total > isr_mensual:
   isr_mensual = total

######################### Calculo ISR anual #############################
grabado_anual = TPERG + payslip.acum_per_grav_anual

if contract.tablas_cfdi_id:
    line = contract.env['tablas.isr.anual'].search([('form_id','=',contract.tablas_cfdi_id.id),('lim_inf','<=',grabado_anual)],order='lim_inf desc',limit=1)
    if line:
       limite_inferior = line.lim_inf
       cuota_fija = line.c_fija
       porcentaje_sobre_excedente = line.s_excedente
	   
#articulo 113
excedente_limite_superior = grabado_anual - limite_inferior
impuesto_marginal = excedente_limite_superior * porcentaje_sobre_excedente/100
isr_tarifa_113 = impuesto_marginal + cuota_fija

sub_apl_anual = payslip.acum_subsidio_aplicado_anual -  payslip.acum_dev_subem - payslip.acum_dev_subem_entregado
  
isr_ret_anual =  payslip.acum_isr_anual + payslip.acum_isr_ajuste - payslip.acum_dev_isr

isr_anual = isr_tarifa_113 - isr_ret_anual - isr_mensual

if isr_anual > 0:
   result =  abs(round(isr_anual, 2))
else:
   result =  0","if payslip.isr_anual and payslip.isr_ajustar:
   result = 1
else:
   result = 0","Todo el monto","catalogos.deduccion02",,"Código Python"
"dev_hr_loan.dev_emp_loan_interest_installment","Deducciones","D051","Interés préstamo",,"Sueldos ordinaria","625","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = (payslip.installment_int or 0)","result = (payslip.installment_int or 0)","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_392_049ef61b","Deducciones","D052","Descuento periodico 1",,"Sueldos ordinaria","630","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = (payslip.descuento1_amount or 0)","result = (payslip.descuento1_amount or 0)","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_394_adcdd8fc","Deducciones","D053","Interés descuento periodico 1",,"Sueldos ordinaria","635","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = (payslip.descuento1_int or 0)","result = (payslip.descuento1_int or 0)","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_393_662f5ad4","Deducciones","D054","Descuento periodico 2",,"Sueldos ordinaria","640","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = (payslip.descuento2_amount or 0)","result = (payslip.descuento2_amount or 0)","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_395_21198531","Deducciones","D055","Interés descuento periodico 2",,"Sueldos ordinaria","645","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = (payslip.descuento2_int or 0)","result = (payslip.descuento2_int or 0)","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_169_7a01a0e2","Deducciones","D056","Descuento vale de comida",,"Sueldos ordinaria","650","Expresión Python","1.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = round((contract.tablas_cfdi_id.uma * 0.20 * 365 /12 ) / 2)","if contract.vale_despensa:
   result = 1
else:
   result = 0","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_124_36212b01","Deducciones","D057","Fallecimiento",,"Sueldos ordinaria","655","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"if inputs.D057:
   result = inputs.D057.amount
else:
   result =0","if inputs.D057:
   result =  1
else:
   result = 0","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_36","Auxiliar","TDED","Total deducciones",,"Sueldos ordinaria","699","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_548_aec35d82","Auxiliar","TDED","Total deducciones",,"Comprobación viáticos","699","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_559_3b30b3e3","Auxiliar","TDED","Total deducciones",,"Entrega Viaticos","699","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_565_cf66a546","Auxiliar","TDED","Total deducciones",,"Liquidación - indemnizacion/finiquito","699","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_571_1541a012","Auxiliar","TDED","Total deducciones",,"Reparto de utilidades","699","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_582_073547c0","Auxiliar","TDED","Total deducciones",,"Aguinaldo","699","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_591_3057c069","Auxiliar","TDED","Total deducciones",,"Asimilado","699","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_410_2e34a808","Deducciones","D099","Ajuste al neto",,"Sueldos ordinaria","890","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
neto = 0
neto = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

if rules.P019:
   neto = neto - P019

if rules.P032:
   neto = neto - P032

completo = round(neto,2)
entero = int(neto)

decimales = completo - entero

if decimales < 0.10:
   total = decimales - 0.0
if decimales > 0.10 and decimales < 0.20:
   total = decimales - 0.20
if decimales > 0.20 and decimales < 0.30:
   total = decimales - 0.20
if decimales > 0.30 and decimales < 0.40:
   total = decimales - 0.40
if decimales > 0.40 and decimales < 0.50:
   total = decimales - 0.40
if decimales > 0.50 and decimales < 0.60:
   total = decimales - 0.60
if decimales > 0.60 and decimales < 0.70:
   total = decimales - 0.60
if decimales > 0.70 and decimales < 0.80:
   total = decimales - 0.80
if decimales > 0.80 and decimales < 0.90:
   total = decimales - 0.80
if decimales > 0.90:
   total = decimales - 1.0

result = total","total = 0
neto = 0
neto = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

if rules.P019:
   neto = neto - P019

if rules.P032:
   neto = neto - P032

completo = round(neto,2)
entero = int(neto)

decimales = completo - entero

if decimales < 0.10:
   total = 1
if decimales > 0.10 and decimales < 0.20:
   total = 0
if decimales > 0.20 and decimales < 0.30:
   total = 1
if decimales > 0.30 and decimales < 0.40:
   total =0
if decimales > 0.40 and decimales < 0.50:
   total = 1
if decimales > 0.50 and decimales < 0.60:
   total = 0
if decimales > 0.60 and decimales < 0.70:
   total = 1
if decimales > 0.70 and decimales < 0.80:
   total = 0
if decimales > 0.80 and decimales < 0.90:
   total = 1
if decimales > 0.90:
   total = 0

result = total","Todo el monto","catalogos.deduccion04",,"Código Python"
"__export__.hr_salary_rule_409_6172aa1a","Percepciones","P044","Ajuste al neto",,"Sueldos ordinaria","891","Expresión Python","0.0",,"Efectivo",,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
neto = 0
neto = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

if rules.P019:
   neto = neto - P019

if rules.P032:
   neto = neto - P032

completo = round(neto,2)
entero = int(neto)

decimales = completo - entero

if decimales < 0.10:
   total = 0.0 - decimales
if decimales > 0.10 and decimales < 0.20:
   total = 0.20 - decimales
if decimales > 0.20 and decimales < 0.30:
   total = 0.20 - decimales
if decimales > 0.30 and decimales < 0.40:
   total = 0.40 - decimales
if decimales > 0.40 and decimales < 0.50:
   total = 0.40 - decimales
if decimales > 0.50 and decimales < 0.60:
   total = 0.60 - decimales
if decimales > 0.60 and decimales < 0.70:
   total = 0.60 - decimales
if decimales > 0.70 and decimales < 0.80:
   total = 0.80 - decimales
if decimales > 0.80 and decimales < 0.90:
   total = 0.80 - decimales
if decimales > 0.90:
   total = 1.0 - decimales

result = total","total = 0
neto = 0
neto = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

if rules.P019:
   neto = neto - P019

if rules.P032:
   neto = neto - P032

completo = round(neto,2)
entero = int(neto)

decimales = completo - entero

if decimales < 0.10:
   total = 0
if decimales > 0.10 and decimales < 0.20:
   total = 1
if decimales > 0.20 and decimales < 0.30:
   total = 0
if decimales > 0.30 and decimales < 0.40:
   total =1
if decimales > 0.40 and decimales < 0.50:
   total = 0
if decimales > 0.50 and decimales < 0.60:
   total = 1
if decimales > 0.60 and decimales < 0.70:
   total = 0
if decimales > 0.70 and decimales < 0.80:
   total = 1
if decimales > 0.80 and decimales < 0.90:
   total = 0
if decimales > 0.90:
   total = 1

result = total","Todo el monto",,"catalogo.percepciones33","Código Python"
"__export__.hr_salary_rule_184_61367129","Auxiliar","EFECT","Sueldo neto en efectivo",,"Sueldos ordinaria","899","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
total = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

result = total","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_549_8eb9fea3","Auxiliar","EFECT","Sueldo neto en efectivo",,"Comprobación viáticos","899","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
total = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

result = total","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_553_9e56ae8d","Auxiliar","EFECT","Sueldo neto en efectivo",,"Entrega Viaticos","899","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
total = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

result = total","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_560_a2e443a6","Auxiliar","EFECT","Sueldo neto en efectivo",,"Liquidación - indemnizacion/finiquito","899","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
total = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

result = total","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_574_f97c15d3","Auxiliar","EFECT","Sueldo neto en efectivo",,"Reparto de utilidades","899","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
total = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

result = total","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_576_f9c1fb12","Auxiliar","EFECT","Sueldo neto en efectivo",,"Aguinaldo","899","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
total = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

result = total","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_585_57d5d474","Auxiliar","EFECT","Sueldo neto en efectivo",,"Asimilado","899","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"total = 0
total = categories.BASIC + categories.ALW + categories.ALW3 - categories.DED

result = total","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_371_0f0734af","Auxiliar","NET","Sueldo neto",,"Liquidación - indemnizacion/finiquito","900","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.BASIC + categories.ALW  + categories.ALW3 - categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_550_9c90301f","Auxiliar","NET","Sueldo neto",,"Comprobación viáticos","900","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.BASIC + categories.ALW  + categories.ALW3 - categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_554_fe9a2755","Auxiliar","NET","Sueldo neto",,"Entrega Viaticos","900","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.BASIC + categories.ALW  + categories.ALW3 - categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_572_4948be14","Auxiliar","NET","Sueldo neto",,"Sueldos ordinaria","900","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.BASIC + categories.ALW  + categories.ALW3 - categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_573_c4c42d7b","Auxiliar","NET","Sueldo neto",,"Reparto de utilidades","900","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.BASIC + categories.ALW  + categories.ALW3 - categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_577_d55b49e9","Auxiliar","NET","Sueldo neto",,"Aguinaldo","900","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.BASIC + categories.ALW  + categories.ALW3 - categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
"__export__.hr_salary_rule_586_2981147d","Auxiliar","NET","Sueldo neto",,"Asimilado","900","Siempre verdadero","0.0",,,,,,"0.0","0.0","0.0",,,,"0.0",,,,"result = categories.BASIC + categories.ALW  + categories.ALW3 - categories.DED","
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days
                    # inputs: object containing the computed inputs

                    # Note: returned value have to be set in the variable 'result'

                    result = rules.NET > categories.NET * 0.10","Todo el monto",,,"Código Python"
